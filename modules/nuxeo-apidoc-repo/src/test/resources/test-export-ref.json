{
  "bundles": [
    {
      "@type": "NXBundle",
      "artifactId": "nuxeo-apidoc-core",
      "artifactVersion": "mockTestArtifactVersion",
      "bundleGroup": {
        "@type": "NXBundleGroup",
        "bundleIds": [
          "org.nuxeo.apidoc.core",
          "org.nuxeo.apidoc.repo"
        ],
        "hierarchyPath": "/grp:org.nuxeo.ecm.platform/grp:org.nuxeo.apidoc",
        "id": "grp:org.nuxeo.apidoc",
        "name": "org.nuxeo.apidoc",
        "parentIds": [
          "grp:org.nuxeo.ecm.platform"
        ],
        "readmes": [
          {
            "content": "## About Explorer\n\nThese modules provide an API to browse the Nuxeo distribution tree:\n\n    - BundleGroup (maven group or artificial grouping)\n      - Bundle\n        - Component\n          - Service\n          - Extension Points\n          - Contributions\n    - Operations\n    - Packages\n\nThe Nuxeo Distribution can be:\n\n - live: in memory (meaning runtime introspection)\n - persisted: saved in Nuxeo Repository as a tree of Documents\n\nThe following documentation items are also extracted:\n\n - documentation that is built-in Nuxeo Runtime descriptors\n - readme files that may be embedded inside the jar\n\n## What it can be used for\n\n - browse you distribution\n - check that a given contribution is deployed\n - play with Nuxeo Runtime\n\n## Configuration\n\nThe template `explorer-sitemode` enables the nuxeo.conf property `org.nuxeo.apidoc.site.mode` and\ndefines an anonymous user.\nThe property `org.nuxeo.apidoc.site.mode` comes with a more user friendly design and hides the current\n\"live\" distribution from display and API.\n\nThe template `explorer-virtualadmin` disables the usual `Administrator` user creation at database\ninitialization and adds a virtual admin user with name `apidocAdmin`, whose password can be changed using\nnuxeo.conf property `org.nuxeo.apidoc.apidocAdmin.password`.\n\n## Modules\n\nThis plugin is composed of 3 bundles:\n\n - nuxeo-apidoc-core: for the low level API on the live runtime\n - nuxeo-apidoc-repo: for the persistence of exported content on the Nuxeo repository\n - nuxeo-apidoc-webengine: for JAX-RS API and Webview\n",
            "digest": "mockTestDigest",
            "encoding": "UTF-8",
            "length": 1541,
            "mimeType": "text/plain",
            "name": "ReadMe.md"
          }
        ],
        "version": "mockTestVersion"
      },
      "bundleId": "org.nuxeo.apidoc.core",
      "components": [],
      "fileName": "mockTestFileName",
      "groupId": "org.nuxeo.ecm.platform",
      "hierarchyPath": "/grp:org.nuxeo.ecm.platform/grp:org.nuxeo.apidoc/org.nuxeo.apidoc.core",
      "id": "org.nuxeo.apidoc.core",
      "location": "mockTestLocation",
      "manifest": "mockTestManifest",
      "packages": [
        "platform-explorer-mock"
      ],
      "parentReadme": {
        "content": "## About Explorer\n\nThese modules provide an API to browse the Nuxeo distribution tree:\n\n    - BundleGroup (maven group or artificial grouping)\n      - Bundle\n        - Component\n          - Service\n          - Extension Points\n          - Contributions\n    - Operations\n    - Packages\n\nThe Nuxeo Distribution can be:\n\n - live: in memory (meaning runtime introspection)\n - persisted: saved in Nuxeo Repository as a tree of Documents\n\nThe following documentation items are also extracted:\n\n - documentation that is built-in Nuxeo Runtime descriptors\n - readme files that may be embedded inside the jar\n\n## What it can be used for\n\n - browse you distribution\n - check that a given contribution is deployed\n - play with Nuxeo Runtime\n\n## Configuration\n\nThe template `explorer-sitemode` enables the nuxeo.conf property `org.nuxeo.apidoc.site.mode` and\ndefines an anonymous user.\nThe property `org.nuxeo.apidoc.site.mode` comes with a more user friendly design and hides the current\n\"live\" distribution from display and API.\n\nThe template `explorer-virtualadmin` disables the usual `Administrator` user creation at database\ninitialization and adds a virtual admin user with name `apidocAdmin`, whose password can be changed using\nnuxeo.conf property `org.nuxeo.apidoc.apidocAdmin.password`.\n\n## Modules\n\nThis plugin is composed of 3 bundles:\n\n - nuxeo-apidoc-core: for the low level API on the live runtime\n - nuxeo-apidoc-repo: for the persistence of exported content on the Nuxeo repository\n - nuxeo-apidoc-webengine: for JAX-RS API and Webview\n",
        "digest": "mockTestDigest",
        "encoding": "UTF-8",
        "length": 1541,
        "mimeType": "text/plain",
        "name": "ReadMe.md"
      },
      "readme": {
        "content": "## About nuxeo-apidoc-core\n\nThis bundle provides an API to browse the Nuxeo distribution tree:\n\n    - BundleGroup (maven group or artificial grouping)\n      - Bundle\n        - Component\n          - Service\n          - Extension Points\n          - Contributions\n    - Operations\n    - Packages\n\nThis API has 2 implementations:\n - org.nuxeo.apidoc.introspection: Nuxeo Runtime in memory introspection\n - org.nuxeo.apidoc.adapters: DocumentModel adapters implementing the same API\n\nThe following documentation items are also extracted:\n - documentation that is built-in Nuxeo Runtime descriptors\n - readme files that may be embedded inside the jar\n\nThe service is made pluggable in two ways:\n - the plugins extension point allows to:\n    - add more introspection to the live runtime\n    - persist this introspection\n    - display this introspection in the webengine UI\n - the exports extension point allows to generate custom exports from a live distribution\n",
        "digest": "mockTestDigest",
        "encoding": "UTF-8",
        "length": 956,
        "mimeType": "text/plain",
        "name": "ReadMe.md"
      },
      "requirements": [],
      "version": "mockTestVersion"
    },
    {
      "@type": "NXBundle",
      "artifactId": "nuxeo-apidoc-repo",
      "artifactVersion": "mockTestArtifactVersion",
      "bundleGroup": {
        "@type": "NXBundleGroup",
        "bundleIds": [
          "org.nuxeo.apidoc.core",
          "org.nuxeo.apidoc.repo"
        ],
        "hierarchyPath": "/grp:org.nuxeo.ecm.platform/grp:org.nuxeo.apidoc",
        "id": "grp:org.nuxeo.apidoc",
        "name": "org.nuxeo.apidoc",
        "parentIds": [
          "grp:org.nuxeo.ecm.platform"
        ],
        "readmes": [
          {
            "content": "## About Explorer\n\nThese modules provide an API to browse the Nuxeo distribution tree:\n\n    - BundleGroup (maven group or artificial grouping)\n      - Bundle\n        - Component\n          - Service\n          - Extension Points\n          - Contributions\n    - Operations\n    - Packages\n\nThe Nuxeo Distribution can be:\n\n - live: in memory (meaning runtime introspection)\n - persisted: saved in Nuxeo Repository as a tree of Documents\n\nThe following documentation items are also extracted:\n\n - documentation that is built-in Nuxeo Runtime descriptors\n - readme files that may be embedded inside the jar\n\n## What it can be used for\n\n - browse you distribution\n - check that a given contribution is deployed\n - play with Nuxeo Runtime\n\n## Configuration\n\nThe template `explorer-sitemode` enables the nuxeo.conf property `org.nuxeo.apidoc.site.mode` and\ndefines an anonymous user.\nThe property `org.nuxeo.apidoc.site.mode` comes with a more user friendly design and hides the current\n\"live\" distribution from display and API.\n\nThe template `explorer-virtualadmin` disables the usual `Administrator` user creation at database\ninitialization and adds a virtual admin user with name `apidocAdmin`, whose password can be changed using\nnuxeo.conf property `org.nuxeo.apidoc.apidocAdmin.password`.\n\n## Modules\n\nThis plugin is composed of 3 bundles:\n\n - nuxeo-apidoc-core: for the low level API on the live runtime\n - nuxeo-apidoc-repo: for the persistence of exported content on the Nuxeo repository\n - nuxeo-apidoc-webengine: for JAX-RS API and Webview\n",
            "digest": "mockTestDigest",
            "encoding": "UTF-8",
            "length": 1541,
            "mimeType": "text/plain",
            "name": "ReadMe.md"
          }
        ],
        "version": "mockTestVersion"
      },
      "bundleId": "org.nuxeo.apidoc.repo",
      "components": [
        {
          "@type": "NXComponent",
          "documentationHtml": "",
          "extensionPoints": [],
          "extensions": [
            {
              "@type": "NXContribution",
              "contributionItems": [
                {
                  "documentation": "<p/>\nUpdates latest distribution flag.",
                  "id": "latestDistributionsListener",
                  "label": "listener latestDistributionsListener",
                  "rawXml": "<listener async=\"false\" class=\"org.nuxeo.apidoc.listener.LatestDistributionsListener\" name=\"latestDistributionsListener\" postCommit=\"false\">\n      <documentation>\n        Updates latest distribution flag.\n      </documentation>\n      <event>aboutToCreate</event>\n      <event>beforeDocumentModification</event>\n    </listener>",
                  "xml": "&lt;listener async=&quot;false&quot; class=&quot;org.nuxeo.apidoc.listener.LatestDistributionsListener&quot; name=&quot;latestDistributionsListener&quot; postCommit=&quot;false&quot;&gt;\n      &lt;documentation&gt;\n        Updates latest distribution flag.\n      &lt;/documentation&gt;\n      &lt;event&gt;aboutToCreate&lt;/event&gt;\n      &lt;event&gt;beforeDocumentModification&lt;/event&gt;\n    &lt;/listener&gt;"
                },
                {
                  "documentation": "<p/>\nListener in charge of triggering AttributesExtractorScheduler.",
                  "id": "AttributesExtractorStater",
                  "label": "listener AttributesExtractorStater",
                  "rawXml": "<listener async=\"false\" class=\"org.nuxeo.apidoc.listener.AttributesExtractorStater\" name=\"AttributesExtractorStater\" postCommit=\"false\">\n      <documentation>\n        Listener in charge of triggering AttributesExtractorScheduler.\n      </documentation>\n      <event>aboutToCreate</event>\n      <event>beforeDocumentModification</event>\n    </listener>",
                  "xml": "&lt;listener async=&quot;false&quot; class=&quot;org.nuxeo.apidoc.listener.AttributesExtractorStater&quot; name=&quot;AttributesExtractorStater&quot; postCommit=&quot;false&quot;&gt;\n      &lt;documentation&gt;\n        Listener in charge of triggering AttributesExtractorScheduler.\n      &lt;/documentation&gt;\n      &lt;event&gt;aboutToCreate&lt;/event&gt;\n      &lt;event&gt;beforeDocumentModification&lt;/event&gt;\n    &lt;/listener&gt;"
                },
                {
                  "documentation": "<p/>\nSchedules a work for XML attributes extraction.",
                  "id": "AttributesExtractorScheduler",
                  "label": "listener AttributesExtractorScheduler",
                  "rawXml": "<listener async=\"false\" class=\"org.nuxeo.apidoc.listener.AttributesExtractorScheduler\" name=\"AttributesExtractorScheduler\" postCommit=\"false\" priority=\"20\">\n      <description>\n        Schedules a work for XML attributes extraction.\n      </description>\n      <event>documentCreated</event>\n      <event>documentModified</event>\n    </listener>",
                  "xml": "&lt;listener async=&quot;false&quot; class=&quot;org.nuxeo.apidoc.listener.AttributesExtractorScheduler&quot; name=&quot;AttributesExtractorScheduler&quot; postCommit=&quot;false&quot; priority=&quot;20&quot;&gt;\n      &lt;description&gt;\n        Schedules a work for XML attributes extraction.\n      &lt;/description&gt;\n      &lt;event&gt;documentCreated&lt;/event&gt;\n      &lt;event&gt;documentModified&lt;/event&gt;\n    &lt;/listener&gt;"
                }
              ],
              "documentation": "\n      These contributions are used for latest distribution flag update and XML attributes extractions in\n      extension points.\n    \n",
              "documentationHtml": "<p/>\nThese contributions are used for latest distribution flag update and XML attributes extractions in\nextension points.\n<p/>",
              "extensionPoint": "org.nuxeo.ecm.core.event.EventServiceComponent--listener",
              "hierarchyPath": "/grp:org.nuxeo.ecm.platform/grp:org.nuxeo.apidoc/org.nuxeo.apidoc.repo/org.nuxeo.apidoc.listener.contrib/Contributions/org.nuxeo.apidoc.listener.contrib--listener",
              "id": "org.nuxeo.apidoc.listener.contrib--listener",
              "targetComponentName": {
                "rawName": "service:org.nuxeo.ecm.core.event.EventServiceComponent",
                "name": "org.nuxeo.ecm.core.event.EventServiceComponent",
                "type": "service"
              },
              "version": "mockTestVersion",
              "xml": "<extension point=\"listener\" target=\"org.nuxeo.ecm.core.event.EventServiceComponent\">\n    <documentation>\n      These contributions are used for latest distribution flag update and XML attributes extractions in\n      extension points.\n    </documentation>\n\n    <listener async=\"false\" class=\"org.nuxeo.apidoc.listener.LatestDistributionsListener\" name=\"latestDistributionsListener\" postCommit=\"false\">\n      <documentation>\n        Updates latest distribution flag.\n      </documentation>\n      <event>aboutToCreate</event>\n      <event>beforeDocumentModification</event>\n    </listener>\n\n    <listener async=\"false\" class=\"org.nuxeo.apidoc.listener.AttributesExtractorStater\" name=\"AttributesExtractorStater\" postCommit=\"false\">\n      <documentation>\n        Listener in charge of triggering AttributesExtractorScheduler.\n      </documentation>\n      <event>aboutToCreate</event>\n      <event>beforeDocumentModification</event>\n    </listener>\n\n    <listener async=\"false\" class=\"org.nuxeo.apidoc.listener.AttributesExtractorScheduler\" name=\"AttributesExtractorScheduler\" postCommit=\"false\" priority=\"20\">\n      <description>\n        Schedules a work for XML attributes extraction.\n      </description>\n      <event>documentCreated</event>\n      <event>documentModified</event>\n    </listener>\n  </extension>"
            }
          ],
          "hierarchyPath": "/grp:org.nuxeo.ecm.platform/grp:org.nuxeo.apidoc/org.nuxeo.apidoc.repo/org.nuxeo.apidoc.listener.contrib",
          "name": "org.nuxeo.apidoc.listener.contrib",
          "registrationOrder": 5,
          "requirements": [],
          "services": [],
          "version": "mockTestVersion",
          "xmlFileContent": "<?xml version=\"1.0\"?>\n<component name=\"org.nuxeo.apidoc.listener.contrib\">\n\n  <extension target=\"org.nuxeo.ecm.core.event.EventServiceComponent\" point=\"listener\">\n    <documentation>\n      These contributions are used for latest distribution flag update and XML attributes extractions in\n      extension points.\n    </documentation>\n\n    <listener name=\"latestDistributionsListener\" async=\"false\" postCommit=\"false\"\n      class=\"org.nuxeo.apidoc.listener.LatestDistributionsListener\">\n      <documentation>\n        Updates latest distribution flag.\n      </documentation>\n      <event>aboutToCreate</event>\n      <event>beforeDocumentModification</event>\n    </listener>\n\n    <listener name=\"AttributesExtractorStater\" async=\"false\" postCommit=\"false\"\n      class=\"org.nuxeo.apidoc.listener.AttributesExtractorStater\">\n      <documentation>\n        Listener in charge of triggering AttributesExtractorScheduler.\n      </documentation>\n      <event>aboutToCreate</event>\n      <event>beforeDocumentModification</event>\n    </listener>\n\n    <listener name=\"AttributesExtractorScheduler\" async=\"false\" postCommit=\"false\"\n      class=\"org.nuxeo.apidoc.listener.AttributesExtractorScheduler\" priority=\"20\">\n      <description>\n        Schedules a work for XML attributes extraction.\n      </description>\n      <event>documentCreated</event>\n      <event>documentModified</event>\n    </listener>\n  </extension>\n\n</component>\n",
          "xmlFileName": "mockTestXmlFileName",
          "xmlPureComponent": true
        },
        {
          "@type": "NXComponent",
          "documentationHtml": "",
          "extensionPoints": [],
          "extensions": [
            {
              "@type": "NXContribution",
              "contributionItems": [
                {
                  "documentation": "",
                  "id": null,
                  "label": "adapter",
                  "rawXml": "<adapter class=\"org.nuxeo.apidoc.api.BundleGroup\" factory=\"org.nuxeo.apidoc.adapters.AdapterFactory\" type=\"NXBundleGroup\"/>",
                  "xml": "&lt;adapter class=&quot;org.nuxeo.apidoc.api.BundleGroup&quot; factory=&quot;org.nuxeo.apidoc.adapters.AdapterFactory&quot; type=&quot;NXBundleGroup&quot;/&gt;"
                },
                {
                  "documentation": "",
                  "id": null,
                  "label": "adapter",
                  "rawXml": "<adapter class=\"org.nuxeo.apidoc.api.BundleInfo\" factory=\"org.nuxeo.apidoc.adapters.AdapterFactory\" type=\"NXBundle\"/>",
                  "xml": "&lt;adapter class=&quot;org.nuxeo.apidoc.api.BundleInfo&quot; factory=&quot;org.nuxeo.apidoc.adapters.AdapterFactory&quot; type=&quot;NXBundle&quot;/&gt;"
                },
                {
                  "documentation": "",
                  "id": null,
                  "label": "adapter",
                  "rawXml": "<adapter class=\"org.nuxeo.apidoc.api.ComponentInfo\" factory=\"org.nuxeo.apidoc.adapters.AdapterFactory\" type=\"NXComponent\"/>",
                  "xml": "&lt;adapter class=&quot;org.nuxeo.apidoc.api.ComponentInfo&quot; factory=&quot;org.nuxeo.apidoc.adapters.AdapterFactory&quot; type=&quot;NXComponent&quot;/&gt;"
                },
                {
                  "documentation": "",
                  "id": null,
                  "label": "adapter",
                  "rawXml": "<adapter class=\"org.nuxeo.apidoc.api.ExtensionPointInfo\" factory=\"org.nuxeo.apidoc.adapters.AdapterFactory\" type=\"NXExtensionPoint\"/>",
                  "xml": "&lt;adapter class=&quot;org.nuxeo.apidoc.api.ExtensionPointInfo&quot; factory=&quot;org.nuxeo.apidoc.adapters.AdapterFactory&quot; type=&quot;NXExtensionPoint&quot;/&gt;"
                },
                {
                  "documentation": "",
                  "id": null,
                  "label": "adapter",
                  "rawXml": "<adapter class=\"org.nuxeo.apidoc.api.ExtensionInfo\" factory=\"org.nuxeo.apidoc.adapters.AdapterFactory\" type=\"NXContribution\"/>",
                  "xml": "&lt;adapter class=&quot;org.nuxeo.apidoc.api.ExtensionInfo&quot; factory=&quot;org.nuxeo.apidoc.adapters.AdapterFactory&quot; type=&quot;NXContribution&quot;/&gt;"
                },
                {
                  "documentation": "",
                  "id": null,
                  "label": "adapter",
                  "rawXml": "<adapter class=\"org.nuxeo.apidoc.api.ServiceInfo\" factory=\"org.nuxeo.apidoc.adapters.AdapterFactory\" type=\"NXService\"/>",
                  "xml": "&lt;adapter class=&quot;org.nuxeo.apidoc.api.ServiceInfo&quot; factory=&quot;org.nuxeo.apidoc.adapters.AdapterFactory&quot; type=&quot;NXService&quot;/&gt;"
                },
                {
                  "documentation": "",
                  "id": null,
                  "label": "adapter",
                  "rawXml": "<adapter class=\"org.nuxeo.apidoc.snapshot.DistributionSnapshot\" factory=\"org.nuxeo.apidoc.adapters.AdapterFactory\" type=\"NXDistribution\"/>",
                  "xml": "&lt;adapter class=&quot;org.nuxeo.apidoc.snapshot.DistributionSnapshot&quot; factory=&quot;org.nuxeo.apidoc.adapters.AdapterFactory&quot; type=&quot;NXDistribution&quot;/&gt;"
                },
                {
                  "documentation": "",
                  "id": null,
                  "label": "adapter",
                  "rawXml": "<adapter class=\"org.nuxeo.apidoc.api.OperationInfo\" factory=\"org.nuxeo.apidoc.adapters.AdapterFactory\" type=\"NXOperation\"/>",
                  "xml": "&lt;adapter class=&quot;org.nuxeo.apidoc.api.OperationInfo&quot; factory=&quot;org.nuxeo.apidoc.adapters.AdapterFactory&quot; type=&quot;NXOperation&quot;/&gt;"
                },
                {
                  "documentation": "",
                  "id": null,
                  "label": "adapter",
                  "rawXml": "<adapter class=\"org.nuxeo.apidoc.api.PackageInfo\" factory=\"org.nuxeo.apidoc.adapters.AdapterFactory\" type=\"NXPackage\"/>",
                  "xml": "&lt;adapter class=&quot;org.nuxeo.apidoc.api.PackageInfo&quot; factory=&quot;org.nuxeo.apidoc.adapters.AdapterFactory&quot; type=&quot;NXPackage&quot;/&gt;"
                },
                {
                  "documentation": "",
                  "id": null,
                  "label": "adapter",
                  "rawXml": "<adapter class=\"org.nuxeo.apidoc.api.NuxeoArtifact\" factory=\"org.nuxeo.apidoc.adapters.AdapterFactory\" type=\"NXBundleGroup\"/>",
                  "xml": "&lt;adapter class=&quot;org.nuxeo.apidoc.api.NuxeoArtifact&quot; factory=&quot;org.nuxeo.apidoc.adapters.AdapterFactory&quot; type=&quot;NXBundleGroup&quot;/&gt;"
                },
                {
                  "documentation": "",
                  "id": null,
                  "label": "adapter",
                  "rawXml": "<adapter class=\"org.nuxeo.apidoc.api.NuxeoArtifact\" factory=\"org.nuxeo.apidoc.adapters.AdapterFactory\" type=\"NXBundle\"/>",
                  "xml": "&lt;adapter class=&quot;org.nuxeo.apidoc.api.NuxeoArtifact&quot; factory=&quot;org.nuxeo.apidoc.adapters.AdapterFactory&quot; type=&quot;NXBundle&quot;/&gt;"
                },
                {
                  "documentation": "",
                  "id": null,
                  "label": "adapter",
                  "rawXml": "<adapter class=\"org.nuxeo.apidoc.api.NuxeoArtifact\" factory=\"org.nuxeo.apidoc.adapters.AdapterFactory\" type=\"NXComponent\"/>",
                  "xml": "&lt;adapter class=&quot;org.nuxeo.apidoc.api.NuxeoArtifact&quot; factory=&quot;org.nuxeo.apidoc.adapters.AdapterFactory&quot; type=&quot;NXComponent&quot;/&gt;"
                },
                {
                  "documentation": "",
                  "id": null,
                  "label": "adapter",
                  "rawXml": "<adapter class=\"org.nuxeo.apidoc.api.NuxeoArtifact\" factory=\"org.nuxeo.apidoc.adapters.AdapterFactory\" type=\"NXExtensionPoint\"/>",
                  "xml": "&lt;adapter class=&quot;org.nuxeo.apidoc.api.NuxeoArtifact&quot; factory=&quot;org.nuxeo.apidoc.adapters.AdapterFactory&quot; type=&quot;NXExtensionPoint&quot;/&gt;"
                },
                {
                  "documentation": "",
                  "id": null,
                  "label": "adapter",
                  "rawXml": "<adapter class=\"org.nuxeo.apidoc.api.NuxeoArtifact\" factory=\"org.nuxeo.apidoc.adapters.AdapterFactory\" type=\"NXContribution\"/>",
                  "xml": "&lt;adapter class=&quot;org.nuxeo.apidoc.api.NuxeoArtifact&quot; factory=&quot;org.nuxeo.apidoc.adapters.AdapterFactory&quot; type=&quot;NXContribution&quot;/&gt;"
                },
                {
                  "documentation": "",
                  "id": null,
                  "label": "adapter",
                  "rawXml": "<adapter class=\"org.nuxeo.apidoc.api.NuxeoArtifact\" factory=\"org.nuxeo.apidoc.adapters.AdapterFactory\" type=\"NXService\"/>",
                  "xml": "&lt;adapter class=&quot;org.nuxeo.apidoc.api.NuxeoArtifact&quot; factory=&quot;org.nuxeo.apidoc.adapters.AdapterFactory&quot; type=&quot;NXService&quot;/&gt;"
                },
                {
                  "documentation": "",
                  "id": null,
                  "label": "adapter",
                  "rawXml": "<adapter class=\"org.nuxeo.apidoc.api.NuxeoArtifact\" factory=\"org.nuxeo.apidoc.adapters.AdapterFactory\" type=\"NXOperation\"/>",
                  "xml": "&lt;adapter class=&quot;org.nuxeo.apidoc.api.NuxeoArtifact&quot; factory=&quot;org.nuxeo.apidoc.adapters.AdapterFactory&quot; type=&quot;NXOperation&quot;/&gt;"
                },
                {
                  "documentation": "",
                  "id": null,
                  "label": "adapter",
                  "rawXml": "<adapter class=\"org.nuxeo.apidoc.api.NuxeoArtifact\" factory=\"org.nuxeo.apidoc.adapters.AdapterFactory\" type=\"NXPackage\"/>",
                  "xml": "&lt;adapter class=&quot;org.nuxeo.apidoc.api.NuxeoArtifact&quot; factory=&quot;org.nuxeo.apidoc.adapters.AdapterFactory&quot; type=&quot;NXPackage&quot;/&gt;"
                }
              ],
              "documentation": "\n      These contributions provide a mapping between live introspections and persisted representations of a\n      distribution.\n    \n",
              "documentationHtml": "<p/>\nThese contributions provide a mapping between live introspections and persisted representations of a\ndistribution.\n<p/>",
              "extensionPoint": "org.nuxeo.ecm.core.api.DocumentAdapterService--adapters",
              "hierarchyPath": "/grp:org.nuxeo.ecm.platform/grp:org.nuxeo.apidoc/org.nuxeo.apidoc.repo/org.nuxeo.apidoc.adapterContrib/Contributions/org.nuxeo.apidoc.adapterContrib--adapters",
              "id": "org.nuxeo.apidoc.adapterContrib--adapters",
              "targetComponentName": {
                "rawName": "service:org.nuxeo.ecm.core.api.DocumentAdapterService",
                "name": "org.nuxeo.ecm.core.api.DocumentAdapterService",
                "type": "service"
              },
              "version": "mockTestVersion",
              "xml": "<extension point=\"adapters\" target=\"org.nuxeo.ecm.core.api.DocumentAdapterService\">\n    <documentation>\n      These contributions provide a mapping between live introspections and persisted representations of a\n      distribution.\n    </documentation>\n\n    <adapter class=\"org.nuxeo.apidoc.api.BundleGroup\" factory=\"org.nuxeo.apidoc.adapters.AdapterFactory\" type=\"NXBundleGroup\"/>\n    <adapter class=\"org.nuxeo.apidoc.api.BundleInfo\" factory=\"org.nuxeo.apidoc.adapters.AdapterFactory\" type=\"NXBundle\"/>\n    <adapter class=\"org.nuxeo.apidoc.api.ComponentInfo\" factory=\"org.nuxeo.apidoc.adapters.AdapterFactory\" type=\"NXComponent\"/>\n    <adapter class=\"org.nuxeo.apidoc.api.ExtensionPointInfo\" factory=\"org.nuxeo.apidoc.adapters.AdapterFactory\" type=\"NXExtensionPoint\"/>\n    <adapter class=\"org.nuxeo.apidoc.api.ExtensionInfo\" factory=\"org.nuxeo.apidoc.adapters.AdapterFactory\" type=\"NXContribution\"/>\n    <adapter class=\"org.nuxeo.apidoc.api.ServiceInfo\" factory=\"org.nuxeo.apidoc.adapters.AdapterFactory\" type=\"NXService\"/>\n    <adapter class=\"org.nuxeo.apidoc.snapshot.DistributionSnapshot\" factory=\"org.nuxeo.apidoc.adapters.AdapterFactory\" type=\"NXDistribution\"/>\n    <adapter class=\"org.nuxeo.apidoc.api.OperationInfo\" factory=\"org.nuxeo.apidoc.adapters.AdapterFactory\" type=\"NXOperation\"/>\n    <adapter class=\"org.nuxeo.apidoc.api.PackageInfo\" factory=\"org.nuxeo.apidoc.adapters.AdapterFactory\" type=\"NXPackage\"/>\n\n    <adapter class=\"org.nuxeo.apidoc.api.NuxeoArtifact\" factory=\"org.nuxeo.apidoc.adapters.AdapterFactory\" type=\"NXBundleGroup\"/>\n    <adapter class=\"org.nuxeo.apidoc.api.NuxeoArtifact\" factory=\"org.nuxeo.apidoc.adapters.AdapterFactory\" type=\"NXBundle\"/>\n    <adapter class=\"org.nuxeo.apidoc.api.NuxeoArtifact\" factory=\"org.nuxeo.apidoc.adapters.AdapterFactory\" type=\"NXComponent\"/>\n    <adapter class=\"org.nuxeo.apidoc.api.NuxeoArtifact\" factory=\"org.nuxeo.apidoc.adapters.AdapterFactory\" type=\"NXExtensionPoint\"/>\n    <adapter class=\"org.nuxeo.apidoc.api.NuxeoArtifact\" factory=\"org.nuxeo.apidoc.adapters.AdapterFactory\" type=\"NXContribution\"/>\n    <adapter class=\"org.nuxeo.apidoc.api.NuxeoArtifact\" factory=\"org.nuxeo.apidoc.adapters.AdapterFactory\" type=\"NXService\"/>\n    <adapter class=\"org.nuxeo.apidoc.api.NuxeoArtifact\" factory=\"org.nuxeo.apidoc.adapters.AdapterFactory\" type=\"NXOperation\"/>\n    <adapter class=\"org.nuxeo.apidoc.api.NuxeoArtifact\" factory=\"org.nuxeo.apidoc.adapters.AdapterFactory\" type=\"NXPackage\"/>\n\n  </extension>"
            }
          ],
          "hierarchyPath": "/grp:org.nuxeo.ecm.platform/grp:org.nuxeo.apidoc/org.nuxeo.apidoc.repo/org.nuxeo.apidoc.adapterContrib",
          "name": "org.nuxeo.apidoc.adapterContrib",
          "registrationOrder": 11,
          "requirements": [],
          "services": [],
          "version": "mockTestVersion",
          "xmlFileContent": "<?xml version=\"1.0\"?>\n<component name=\"org.nuxeo.apidoc.adapterContrib\">\n\n  <extension target=\"org.nuxeo.ecm.core.api.DocumentAdapterService\" point=\"adapters\">\n    <documentation>\n      These contributions provide a mapping between live introspections and persisted representations of a\n      distribution.\n    </documentation>\n\n    <adapter type=\"NXBundleGroup\" class=\"org.nuxeo.apidoc.api.BundleGroup\"\n      factory=\"org.nuxeo.apidoc.adapters.AdapterFactory\" />\n    <adapter type=\"NXBundle\" class=\"org.nuxeo.apidoc.api.BundleInfo\"\n      factory=\"org.nuxeo.apidoc.adapters.AdapterFactory\" />\n    <adapter type=\"NXComponent\" class=\"org.nuxeo.apidoc.api.ComponentInfo\"\n      factory=\"org.nuxeo.apidoc.adapters.AdapterFactory\" />\n    <adapter type=\"NXExtensionPoint\" class=\"org.nuxeo.apidoc.api.ExtensionPointInfo\"\n      factory=\"org.nuxeo.apidoc.adapters.AdapterFactory\" />\n    <adapter type=\"NXContribution\" class=\"org.nuxeo.apidoc.api.ExtensionInfo\"\n      factory=\"org.nuxeo.apidoc.adapters.AdapterFactory\" />\n    <adapter type=\"NXService\" class=\"org.nuxeo.apidoc.api.ServiceInfo\"\n      factory=\"org.nuxeo.apidoc.adapters.AdapterFactory\" />\n    <adapter type=\"NXDistribution\" class=\"org.nuxeo.apidoc.snapshot.DistributionSnapshot\"\n      factory=\"org.nuxeo.apidoc.adapters.AdapterFactory\" />\n    <adapter type=\"NXOperation\" class=\"org.nuxeo.apidoc.api.OperationInfo\"\n      factory=\"org.nuxeo.apidoc.adapters.AdapterFactory\" />\n    <adapter type=\"NXPackage\" class=\"org.nuxeo.apidoc.api.PackageInfo\"\n      factory=\"org.nuxeo.apidoc.adapters.AdapterFactory\" />\n\n    <adapter type=\"NXBundleGroup\" class=\"org.nuxeo.apidoc.api.NuxeoArtifact\"\n      factory=\"org.nuxeo.apidoc.adapters.AdapterFactory\" />\n    <adapter type=\"NXBundle\" class=\"org.nuxeo.apidoc.api.NuxeoArtifact\"\n      factory=\"org.nuxeo.apidoc.adapters.AdapterFactory\" />\n    <adapter type=\"NXComponent\" class=\"org.nuxeo.apidoc.api.NuxeoArtifact\"\n      factory=\"org.nuxeo.apidoc.adapters.AdapterFactory\" />\n    <adapter type=\"NXExtensionPoint\" class=\"org.nuxeo.apidoc.api.NuxeoArtifact\"\n      factory=\"org.nuxeo.apidoc.adapters.AdapterFactory\" />\n    <adapter type=\"NXContribution\" class=\"org.nuxeo.apidoc.api.NuxeoArtifact\"\n      factory=\"org.nuxeo.apidoc.adapters.AdapterFactory\" />\n    <adapter type=\"NXService\" class=\"org.nuxeo.apidoc.api.NuxeoArtifact\"\n      factory=\"org.nuxeo.apidoc.adapters.AdapterFactory\" />\n    <adapter type=\"NXOperation\" class=\"org.nuxeo.apidoc.api.NuxeoArtifact\"\n      factory=\"org.nuxeo.apidoc.adapters.AdapterFactory\" />\n    <adapter type=\"NXPackage\" class=\"org.nuxeo.apidoc.api.NuxeoArtifact\"\n      factory=\"org.nuxeo.apidoc.adapters.AdapterFactory\" />\n\n  </extension>\n\n</component>\n",
          "xmlFileName": "mockTestXmlFileName",
          "xmlPureComponent": true
        },
        {
          "@type": "NXComponent",
          "componentClass": "org.nuxeo.apidoc.snapshot.SnapshotManagerComponent",
          "documentation": "<p>\n      This component handles the introspection of the current live Runtime as a distribution.\n    </p>\n<p>\n      It can also persist this introspection as Nuxeo documents, to handle import and export of external distributions.\n    </p>\n",
          "documentationHtml": "<p/>\n<p>\nThis component handles the introspection of the current live Runtime as a distribution.\n</p>\n<p>\nIt can also persist this introspection as Nuxeo documents, to handle import and export of external distributions.\n</p>",
          "extensionPoints": [
            {
              "@type": "NXExtensionPoint",
              "componentId": "org.nuxeo.apidoc.snapshot.SnapshotManagerComponent",
              "descriptors": [
                "org.nuxeo.apidoc.plugin.PluginDescriptor"
              ],
              "documentation": "<p>\n        A plugin can introspect and persist information related to the current runtime environment.\n      </p>\n<p>\n        Sample contribution:\n        <code>\n        <extension point=\"plugins\" target=\"org.nuxeo.apidoc.snapshot.SnapshotManagerComponent\">\n            <plugin class=\"org.nuxeo.apidoc.seam.plugin.SeamPlugin\"\n                id=\"seam\" snapshotClass=\"org.nuxeo.apidoc.seam.introspection.SeamRuntimeSnapshot\">\n                <ui>\n                    <label>Seam Components</label>\n                    <viewType>seam</viewType>\n                    <homeView>listSeamComponents</homeView>\n                    <styleClass>seam</styleClass>\n                </ui>\n            </plugin>\n        </extension>\n    </code>\n</p>\n<p>\n        The class should implement the\n        <b>org.nuxeo.apidoc.plugin.Plugin</b>\n        interface.\n      </p>\n<p>\n        UI elements are used for rendering on webengine pages. The view type should match a webengine resource type,\n        and\n        the module holding this resource should be contributed to the main webengine module as a fragment using:\n        <code>\n          Fragment-Host: org.nuxeo.apidoc.webengine\n        </code>\n</p>\n",
              "documentationHtml": "<p/>\n<p>\nA plugin can introspect and persist information related to the current runtime environment.\n</p>\n<p>\nSample contribution:\n<p/><pre><code>        &lt;extension point=\"plugins\" target=\"org.nuxeo.apidoc.snapshot.SnapshotManagerComponent\">\n            &lt;plugin class=\"org.nuxeo.apidoc.seam.plugin.SeamPlugin\"\n                id=\"seam\" snapshotClass=\"org.nuxeo.apidoc.seam.introspection.SeamRuntimeSnapshot\">\n                &lt;ui>\n                    &lt;label>Seam Components&lt;/label>\n                    &lt;viewType>seam&lt;/viewType>\n                    &lt;homeView>listSeamComponents&lt;/homeView>\n                    &lt;styleClass>seam&lt;/styleClass>\n                &lt;/ui>\n            &lt;/plugin>\n        &lt;/extension>\n</code></pre><p/>\n</p>\n<p>\nThe class should implement the\n<b>org.nuxeo.apidoc.plugin.Plugin</b>\ninterface.\n</p>\n<p>\nUI elements are used for rendering on webengine pages. The view type should match a webengine resource type,\nand\nthe module holding this resource should be contributed to the main webengine module as a fragment using:\n<p/><pre><code>          Fragment-Host: org.nuxeo.apidoc.webengine\n</code></pre><p/>\n</p>",
              "hierarchyPath": "/grp:org.nuxeo.ecm.platform/grp:org.nuxeo.apidoc/org.nuxeo.apidoc.repo/org.nuxeo.apidoc.snapshot.SnapshotManagerComponent/ExtensionPoints/org.nuxeo.apidoc.snapshot.SnapshotManagerComponent--plugins",
              "id": "org.nuxeo.apidoc.snapshot.SnapshotManagerComponent--plugins",
              "label": "plugins (org.nuxeo.apidoc.snapshot.SnapshotManagerComponent)",
              "name": "plugins",
              "version": "mockTestVersion"
            },
            {
              "@type": "NXExtensionPoint",
              "componentId": "org.nuxeo.apidoc.snapshot.SnapshotManagerComponent",
              "descriptors": [
                "org.nuxeo.apidoc.export.api.ExporterDescriptor"
              ],
              "documentation": "\n      Extension point for pluggable export generation.\n    \n",
              "documentationHtml": "<p/>\nExtension point for pluggable export generation.\n<p/>",
              "hierarchyPath": "/grp:org.nuxeo.ecm.platform/grp:org.nuxeo.apidoc/org.nuxeo.apidoc.repo/org.nuxeo.apidoc.snapshot.SnapshotManagerComponent/ExtensionPoints/org.nuxeo.apidoc.snapshot.SnapshotManagerComponent--exporters",
              "id": "org.nuxeo.apidoc.snapshot.SnapshotManagerComponent--exporters",
              "label": "exporters (org.nuxeo.apidoc.snapshot.SnapshotManagerComponent)",
              "name": "exporters",
              "version": "mockTestVersion"
            }
          ],
          "extensions": [
            {
              "@type": "NXContribution",
              "contributionItems": [
                {
                  "documentation": "<p/>\nJson dependency graph",
                  "id": "jsonGraph",
                  "label": "exporter jsonGraph",
                  "rawXml": "<exporter class=\"org.nuxeo.apidoc.export.graphs.plugins.JsonGraphExporter\" id=\"jsonGraph\">\n      <title>Json Graph</title>\n      <description>Json dependency graph</description>\n      <filename>graph.json</filename>\n      <mimetype>application/json</mimetype>\n    </exporter>",
                  "xml": "&lt;exporter class=&quot;org.nuxeo.apidoc.export.graphs.plugins.JsonGraphExporter&quot; id=&quot;jsonGraph&quot;&gt;\n      &lt;title&gt;Json Graph&lt;/title&gt;\n      &lt;description&gt;Json dependency graph&lt;/description&gt;\n      &lt;filename&gt;graph.json&lt;/filename&gt;\n      &lt;mimetype&gt;application/json&lt;/mimetype&gt;\n    &lt;/exporter&gt;"
                },
                {
                  "documentation": "<p/>\nDependency graph exported in DOT format",
                  "id": "dotGraph",
                  "label": "exporter dotGraph",
                  "rawXml": "<exporter class=\"org.nuxeo.apidoc.export.graphs.plugins.DOTGraphExporter\" id=\"dotGraph\">\n      <title>DOT Graph</title>\n      <description>Dependency graph exported in DOT format</description>\n      <filename>graph.dot</filename>\n      <mimetype>application/octet-stream</mimetype>\n    </exporter>",
                  "xml": "&lt;exporter class=&quot;org.nuxeo.apidoc.export.graphs.plugins.DOTGraphExporter&quot; id=&quot;dotGraph&quot;&gt;\n      &lt;title&gt;DOT Graph&lt;/title&gt;\n      &lt;description&gt;Dependency graph exported in DOT format&lt;/description&gt;\n      &lt;filename&gt;graph.dot&lt;/filename&gt;\n      &lt;mimetype&gt;application/octet-stream&lt;/mimetype&gt;\n    &lt;/exporter&gt;"
                }
              ],
              "documentationHtml": "",
              "extensionPoint": "org.nuxeo.apidoc.snapshot.SnapshotManagerComponent--exporters",
              "hierarchyPath": "/grp:org.nuxeo.ecm.platform/grp:org.nuxeo.apidoc/org.nuxeo.apidoc.repo/org.nuxeo.apidoc.snapshot.SnapshotManagerComponent/Contributions/org.nuxeo.apidoc.snapshot.SnapshotManagerComponent--exporters",
              "id": "org.nuxeo.apidoc.snapshot.SnapshotManagerComponent--exporters",
              "targetComponentName": {
                "rawName": "service:org.nuxeo.apidoc.snapshot.SnapshotManagerComponent",
                "name": "org.nuxeo.apidoc.snapshot.SnapshotManagerComponent",
                "type": "service"
              },
              "version": "mockTestVersion",
              "xml": "<extension point=\"exporters\" target=\"org.nuxeo.apidoc.snapshot.SnapshotManagerComponent\">\n    <exporter class=\"org.nuxeo.apidoc.export.graphs.plugins.JsonGraphExporter\" id=\"jsonGraph\">\n      <title>Json Graph</title>\n      <description>Json dependency graph</description>\n      <filename>graph.json</filename>\n      <mimetype>application/json</mimetype>\n    </exporter>\n    <exporter class=\"org.nuxeo.apidoc.export.graphs.plugins.DOTGraphExporter\" id=\"dotGraph\">\n      <title>DOT Graph</title>\n      <description>Dependency graph exported in DOT format</description>\n      <filename>graph.dot</filename>\n      <mimetype>application/octet-stream</mimetype>\n    </exporter>\n  </extension>"
            },
            {
              "@type": "NXContribution",
              "contributionItems": [
                {
                  "documentation": "",
                  "id": "org.nuxeo.apidoc.javadoc.url",
                  "label": "property org.nuxeo.apidoc.javadoc.url",
                  "rawXml": "<property name=\"org.nuxeo.apidoc.javadoc.url\">\n      https://community.nuxeo.com/api/\n    </property>",
                  "xml": "&lt;property name=&quot;org.nuxeo.apidoc.javadoc.url&quot;&gt;\n      https://community.nuxeo.com/api/\n    &lt;/property&gt;"
                }
              ],
              "documentation": "\n      URL base for Javadoc Links.\n    \n",
              "documentationHtml": "<p/>\nURL base for Javadoc Links.\n<p/>",
              "extensionPoint": "org.nuxeo.runtime.ConfigurationService--configuration",
              "hierarchyPath": "/grp:org.nuxeo.ecm.platform/grp:org.nuxeo.apidoc/org.nuxeo.apidoc.repo/org.nuxeo.apidoc.snapshot.SnapshotManagerComponent/Contributions/org.nuxeo.apidoc.snapshot.SnapshotManagerComponent--configuration",
              "id": "org.nuxeo.apidoc.snapshot.SnapshotManagerComponent--configuration",
              "targetComponentName": {
                "rawName": "service:org.nuxeo.runtime.ConfigurationService",
                "name": "org.nuxeo.runtime.ConfigurationService",
                "type": "service"
              },
              "version": "mockTestVersion",
              "xml": "<extension point=\"configuration\" target=\"org.nuxeo.runtime.ConfigurationService\">\n    <documentation>\n      URL base for Javadoc Links.\n    </documentation>\n    <property name=\"org.nuxeo.apidoc.javadoc.url\">\n      https://community.nuxeo.com/api/\n    </property>\n  </extension>"
            },
            {
              "@type": "NXContribution",
              "contributionItems": [
                {
                  "documentation": "",
                  "id": "org.nuxeo.apidoc.connect.url",
                  "label": "property org.nuxeo.apidoc.connect.url",
                  "rawXml": "<property name=\"org.nuxeo.apidoc.connect.url\">\n      https://connect.nuxeo.com/nuxeo/site/\n    </property>",
                  "xml": "&lt;property name=&quot;org.nuxeo.apidoc.connect.url&quot;&gt;\n      https://connect.nuxeo.com/nuxeo/site/\n    &lt;/property&gt;"
                }
              ],
              "documentation": "\n      URL base for Connect Links (for Marketplace Packages).\n    \n",
              "documentationHtml": "<p/>\nURL base for Connect Links (for Marketplace Packages).\n<p/>",
              "extensionPoint": "org.nuxeo.runtime.ConfigurationService--configuration",
              "hierarchyPath": "/grp:org.nuxeo.ecm.platform/grp:org.nuxeo.apidoc/org.nuxeo.apidoc.repo/org.nuxeo.apidoc.snapshot.SnapshotManagerComponent/Contributions/org.nuxeo.apidoc.snapshot.SnapshotManagerComponent--configuration1",
              "id": "org.nuxeo.apidoc.snapshot.SnapshotManagerComponent--configuration1",
              "targetComponentName": {
                "rawName": "service:org.nuxeo.runtime.ConfigurationService",
                "name": "org.nuxeo.runtime.ConfigurationService",
                "type": "service"
              },
              "version": "mockTestVersion",
              "xml": "<extension point=\"configuration\" target=\"org.nuxeo.runtime.ConfigurationService\">\n    <documentation>\n      URL base for Connect Links (for Marketplace Packages).\n    </documentation>\n    <property name=\"org.nuxeo.apidoc.connect.url\">\n      https://connect.nuxeo.com/nuxeo/site/\n    </property>\n  </extension>"
            },
            {
              "@type": "NXContribution",
              "contributionItems": [
                {
                  "documentation": "",
                  "id": "org.nuxeo.apidoc.apidocmanagers.group",
                  "label": "property org.nuxeo.apidoc.apidocmanagers.group",
                  "rawXml": "<property name=\"org.nuxeo.apidoc.apidocmanagers.group\">\n      ApidocManagers\n    </property>",
                  "xml": "&lt;property name=&quot;org.nuxeo.apidoc.apidocmanagers.group&quot;&gt;\n      ApidocManagers\n    &lt;/property&gt;"
                },
                {
                  "documentation": "",
                  "id": "org.nuxeo.apidoc.apidocreaders.group",
                  "label": "property org.nuxeo.apidoc.apidocreaders.group",
                  "rawXml": "<property name=\"org.nuxeo.apidoc.apidocreaders.group\">\n      Everyone\n    </property>",
                  "xml": "&lt;property name=&quot;org.nuxeo.apidoc.apidocreaders.group&quot;&gt;\n      Everyone\n    &lt;/property&gt;"
                }
              ],
              "documentation": "\n      Default groups for application managers and readers.\n    \n",
              "documentationHtml": "<p/>\nDefault groups for application managers and readers.\n<p/>",
              "extensionPoint": "org.nuxeo.runtime.ConfigurationService--configuration",
              "hierarchyPath": "/grp:org.nuxeo.ecm.platform/grp:org.nuxeo.apidoc/org.nuxeo.apidoc.repo/org.nuxeo.apidoc.snapshot.SnapshotManagerComponent/Contributions/org.nuxeo.apidoc.snapshot.SnapshotManagerComponent--configuration2",
              "id": "org.nuxeo.apidoc.snapshot.SnapshotManagerComponent--configuration2",
              "targetComponentName": {
                "rawName": "service:org.nuxeo.runtime.ConfigurationService",
                "name": "org.nuxeo.runtime.ConfigurationService",
                "type": "service"
              },
              "version": "mockTestVersion",
              "xml": "<extension point=\"configuration\" target=\"org.nuxeo.runtime.ConfigurationService\">\n    <documentation>\n      Default groups for application managers and readers.\n    </documentation>\n    <property name=\"org.nuxeo.apidoc.apidocmanagers.group\">\n      ApidocManagers\n    </property>\n    <property name=\"org.nuxeo.apidoc.apidocreaders.group\">\n      Everyone\n    </property>\n  </extension>"
            },
            {
              "@type": "NXContribution",
              "contributionItems": [
                {
                  "documentation": "",
                  "id": "org.nuxeo.apidoc.secure.xml.keywords",
                  "label": "property org.nuxeo.apidoc.secure.xml.keywords",
                  "rawXml": "<property name=\"org.nuxeo.apidoc.secure.xml.keywords\">\n      password, Password, secret, apiKey, TMPDIR, TMP, TEMP, TEMPDIR\n    </property>",
                  "xml": "&lt;property name=&quot;org.nuxeo.apidoc.secure.xml.keywords&quot;&gt;\n      password, Password, secret, apiKey, TMPDIR, TMP, TEMP, TEMPDIR\n    &lt;/property&gt;"
                },
                {
                  "documentation": "",
                  "id": "org.nuxeo.apidoc.secure.xml.keywords.whitelisted",
                  "label": "property org.nuxeo.apidoc.secure.xml.keywords.whitelisted",
                  "rawXml": "<property name=\"org.nuxeo.apidoc.secure.xml.keywords.whitelisted\">\n      passwordField, passwordHashAlgorithm\n    </property>",
                  "xml": "&lt;property name=&quot;org.nuxeo.apidoc.secure.xml.keywords.whitelisted&quot;&gt;\n      passwordField, passwordHashAlgorithm\n    &lt;/property&gt;"
                }
              ],
              "documentation": "\n      Properties controlling sensitive configuration exposure, when extracted from runtime contributions by\n      explorer logics.\n\n      @since 20.0.0\n    \n",
              "documentationHtml": "<p/>\nProperties controlling sensitive configuration exposure, when extracted from runtime contributions by\nexplorer logics.\n<p/>\n@since 20.0.0\n<p/>",
              "extensionPoint": "org.nuxeo.runtime.ConfigurationService--configuration",
              "hierarchyPath": "/grp:org.nuxeo.ecm.platform/grp:org.nuxeo.apidoc/org.nuxeo.apidoc.repo/org.nuxeo.apidoc.snapshot.SnapshotManagerComponent/Contributions/org.nuxeo.apidoc.snapshot.SnapshotManagerComponent--configuration3",
              "id": "org.nuxeo.apidoc.snapshot.SnapshotManagerComponent--configuration3",
              "targetComponentName": {
                "rawName": "service:org.nuxeo.runtime.ConfigurationService",
                "name": "org.nuxeo.runtime.ConfigurationService",
                "type": "service"
              },
              "version": "mockTestVersion",
              "xml": "<extension point=\"configuration\" target=\"org.nuxeo.runtime.ConfigurationService\">\n    <documentation>\n      Properties controlling sensitive configuration exposure, when extracted from runtime contributions by\n      explorer logics.\n\n      @since 20.0.0\n    </documentation>\n    <property name=\"org.nuxeo.apidoc.secure.xml.keywords\">\n      password, Password, secret, apiKey, TMPDIR, TMP, TEMP, TEMPDIR\n    </property>\n    <property name=\"org.nuxeo.apidoc.secure.xml.keywords.whitelisted\">\n      passwordField, passwordHashAlgorithm\n    </property>\n  </extension>"
            }
          ],
          "hierarchyPath": "/grp:org.nuxeo.ecm.platform/grp:org.nuxeo.apidoc/org.nuxeo.apidoc.repo/org.nuxeo.apidoc.snapshot.SnapshotManagerComponent",
          "name": "org.nuxeo.apidoc.snapshot.SnapshotManagerComponent",
          "registrationOrder": 58,
          "requirements": [],
          "services": [
            {
              "@type": "NXService",
              "componentId": "org.nuxeo.apidoc.snapshot.SnapshotManagerComponent",
              "hierarchyPath": "/grp:org.nuxeo.ecm.platform/grp:org.nuxeo.apidoc/org.nuxeo.apidoc.repo/org.nuxeo.apidoc.snapshot.SnapshotManagerComponent/Services/org.nuxeo.apidoc.snapshot.SnapshotManager",
              "id": "org.nuxeo.apidoc.snapshot.SnapshotManager",
              "overriden": false,
              "version": "mockTestVersion"
            },
            {
              "@type": "NXService",
              "componentId": "org.nuxeo.apidoc.snapshot.SnapshotManagerComponent",
              "hierarchyPath": "/grp:org.nuxeo.ecm.platform/grp:org.nuxeo.apidoc/org.nuxeo.apidoc.repo/org.nuxeo.apidoc.snapshot.SnapshotManagerComponent/Services/org.nuxeo.apidoc.search.ArtifactSearcher",
              "id": "org.nuxeo.apidoc.search.ArtifactSearcher",
              "overriden": false,
              "version": "mockTestVersion"
            }
          ],
          "version": "mockTestVersion",
          "xmlFileContent": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<component name=\"org.nuxeo.apidoc.snapshot.SnapshotManagerComponent\">\n  <documentation>\n    <p>\n      This component handles the introspection of the current live Runtime as a distribution.\n    </p>\n    <p>\n      It can also persist this introspection as Nuxeo documents, to handle import and export of external distributions.\n    </p>\n  </documentation>\n  <implementation class=\"org.nuxeo.apidoc.snapshot.SnapshotManagerComponent\"></implementation>\n\n  <service>\n    <provide interface=\"org.nuxeo.apidoc.snapshot.SnapshotManager\"></provide>\n    <provide interface=\"org.nuxeo.apidoc.search.ArtifactSearcher\"></provide>\n  </service>\n\n  <extension-point name=\"plugins\">\n    <documentation>\n      <p>\n        A plugin can introspect and persist information related to the current runtime environment.\n      </p>\n      <p>\n        Sample contribution:\n        <code>\n          <extension point=\"plugins\" target=\"org.nuxeo.apidoc.snapshot.SnapshotManagerComponent\">\n            <plugin id=\"seam\" class=\"org.nuxeo.apidoc.seam.plugin.SeamPlugin\" snapshotClass=\"org.nuxeo.apidoc.seam.introspection.SeamRuntimeSnapshot\">\n              <ui>\n                <label>Seam Components</label>\n                <viewType>seam</viewType>\n                <homeView>listSeamComponents</homeView>\n                <styleClass>seam</styleClass>\n              </ui>\n            </plugin>\n          </extension>\n        </code>\n      </p>\n      <p>\n        The class should implement the\n        <b>org.nuxeo.apidoc.plugin.Plugin</b>\n        interface.\n      </p>\n      <p>\n        UI elements are used for rendering on webengine pages. The view type should match a webengine resource type,\n        and\n        the module holding this resource should be contributed to the main webengine module as a fragment using:\n        <code>\n          Fragment-Host: org.nuxeo.apidoc.webengine\n        </code>\n      </p>\n    </documentation>\n    <object class=\"org.nuxeo.apidoc.plugin.PluginDescriptor\"></object>\n  </extension-point>\n\n  <extension-point name=\"exporters\">\n    <documentation>\n      Extension point for pluggable export generation.\n    </documentation>\n    <object class=\"org.nuxeo.apidoc.export.api.ExporterDescriptor\"></object>\n  </extension-point>\n\n  <extension point=\"exporters\" target=\"org.nuxeo.apidoc.snapshot.SnapshotManagerComponent\">\n    <exporter id=\"jsonGraph\" class=\"org.nuxeo.apidoc.export.graphs.plugins.JsonGraphExporter\">\n      <title>Json Graph</title>\n      <description>Json dependency graph</description>\n      <filename>graph.json</filename>\n      <mimetype>application/json</mimetype>\n    </exporter>\n    <exporter id=\"dotGraph\" class=\"org.nuxeo.apidoc.export.graphs.plugins.DOTGraphExporter\">\n      <title>DOT Graph</title>\n      <description>Dependency graph exported in DOT format</description>\n      <filename>graph.dot</filename>\n      <mimetype>application/octet-stream</mimetype>\n    </exporter>\n  </extension>\n\n  <extension point=\"configuration\" target=\"org.nuxeo.runtime.ConfigurationService\">\n    <documentation>\n      URL base for Javadoc Links.\n    </documentation>\n    <property name=\"org.nuxeo.apidoc.javadoc.url\">\n      https://community.nuxeo.com/api/\n    </property>\n  </extension>\n\n  <extension point=\"configuration\" target=\"org.nuxeo.runtime.ConfigurationService\">\n    <documentation>\n      URL base for Connect Links (for Marketplace Packages).\n    </documentation>\n    <property name=\"org.nuxeo.apidoc.connect.url\">\n      https://connect.nuxeo.com/nuxeo/site/\n    </property>\n  </extension>\n\n  <extension point=\"configuration\" target=\"org.nuxeo.runtime.ConfigurationService\">\n    <documentation>\n      Default groups for application managers and readers.\n    </documentation>\n    <property name=\"org.nuxeo.apidoc.apidocmanagers.group\">\n      ApidocManagers\n    </property>\n    <property name=\"org.nuxeo.apidoc.apidocreaders.group\">\n      Everyone\n    </property>\n  </extension>\n\n  <extension point=\"configuration\" target=\"org.nuxeo.runtime.ConfigurationService\">\n    <documentation>\n      Properties controlling sensitive configuration exposure, when extracted from runtime contributions by\n      explorer logics.\n\n      @since 20.0.0\n    </documentation>\n    <property name=\"org.nuxeo.apidoc.secure.xml.keywords\">\n      password, Password, secret, apiKey, TMPDIR, TMP, TEMP, TEMPDIR\n    </property>\n    <property name=\"org.nuxeo.apidoc.secure.xml.keywords.whitelisted\">\n      passwordField, passwordHashAlgorithm\n    </property>\n  </extension>\n\n</component>",
          "xmlFileName": "mockTestXmlFileName",
          "xmlPureComponent": false
        },
        {
          "@type": "NXComponent",
          "documentationHtml": "",
          "extensionPoints": [],
          "extensions": [
            {
              "@type": "NXContribution",
              "contributionItems": [
                {
                  "documentation": "",
                  "id": "NXDistribution",
                  "label": "doctype NXDistribution",
                  "rawXml": "<doctype extends=\"Folder\" name=\"NXDistribution\">\n      <schema name=\"common\"/>\n      <schema name=\"dublincore\"/>\n      <schema name=\"file\"/>\n      <schema name=\"nxdistribution\"/>\n\n      <facet name=\"Commentable\"/>\n      <facet name=\"Versionable\"/>\n      <facet name=\"Folderish\"/>\n\n      <subtypes>\n        <type>NXBundleGroup</type>\n        <type>NXBundle</type>\n        <type>NXOperation</type>\n        <type>NXPackage</type>\n        <type>Workspace</type>\n      </subtypes>\n    </doctype>",
                  "xml": "&lt;doctype extends=&quot;Folder&quot; name=&quot;NXDistribution&quot;&gt;\n      &lt;schema name=&quot;common&quot;/&gt;\n      &lt;schema name=&quot;dublincore&quot;/&gt;\n      &lt;schema name=&quot;file&quot;/&gt;\n      &lt;schema name=&quot;nxdistribution&quot;/&gt;\n\n      &lt;facet name=&quot;Commentable&quot;/&gt;\n      &lt;facet name=&quot;Versionable&quot;/&gt;\n      &lt;facet name=&quot;Folderish&quot;/&gt;\n\n      &lt;subtypes&gt;\n        &lt;type&gt;NXBundleGroup&lt;/type&gt;\n        &lt;type&gt;NXBundle&lt;/type&gt;\n        &lt;type&gt;NXOperation&lt;/type&gt;\n        &lt;type&gt;NXPackage&lt;/type&gt;\n        &lt;type&gt;Workspace&lt;/type&gt;\n      &lt;/subtypes&gt;\n    &lt;/doctype&gt;"
                },
                {
                  "documentation": "",
                  "id": "NXBundleGroup",
                  "label": "doctype NXBundleGroup",
                  "rawXml": "<doctype extends=\"OrderedFolder\" name=\"NXBundleGroup\">\n      <schema name=\"common\"/>\n      <schema name=\"dublincore\"/>\n      <schema name=\"file\"/>\n      <schema name=\"files\"/>\n      <schema name=\"nxbundlegroup\"/>\n\n      <facet name=\"Commentable\"/>\n      <facet name=\"Versionable\"/>\n      <facet name=\"Folderish\"/>\n\n      <subtypes>\n        <type>NXBundleGroup</type>\n      </subtypes>\n    </doctype>",
                  "xml": "&lt;doctype extends=&quot;OrderedFolder&quot; name=&quot;NXBundleGroup&quot;&gt;\n      &lt;schema name=&quot;common&quot;/&gt;\n      &lt;schema name=&quot;dublincore&quot;/&gt;\n      &lt;schema name=&quot;file&quot;/&gt;\n      &lt;schema name=&quot;files&quot;/&gt;\n      &lt;schema name=&quot;nxbundlegroup&quot;/&gt;\n\n      &lt;facet name=&quot;Commentable&quot;/&gt;\n      &lt;facet name=&quot;Versionable&quot;/&gt;\n      &lt;facet name=&quot;Folderish&quot;/&gt;\n\n      &lt;subtypes&gt;\n        &lt;type&gt;NXBundleGroup&lt;/type&gt;\n      &lt;/subtypes&gt;\n    &lt;/doctype&gt;"
                },
                {
                  "documentation": "",
                  "id": "NXBundle",
                  "label": "doctype NXBundle",
                  "rawXml": "<doctype extends=\"OrderedFolder\" name=\"NXBundle\">\n      <schema name=\"common\"/>\n      <schema name=\"dublincore\"/>\n      <schema name=\"file\"/>\n      <schema name=\"nxbundle\"/>\n\n      <facet name=\"Commentable\"/>\n      <facet name=\"Versionable\"/>\n      <facet name=\"Folderish\"/>\n      <subtypes>\n        <type>NXComponent</type>\n        <type>NXService</type>\n        <type>NXExtensionPoint</type>\n        <type>NXContribution</type>\n      </subtypes>\n    </doctype>",
                  "xml": "&lt;doctype extends=&quot;OrderedFolder&quot; name=&quot;NXBundle&quot;&gt;\n      &lt;schema name=&quot;common&quot;/&gt;\n      &lt;schema name=&quot;dublincore&quot;/&gt;\n      &lt;schema name=&quot;file&quot;/&gt;\n      &lt;schema name=&quot;nxbundle&quot;/&gt;\n\n      &lt;facet name=&quot;Commentable&quot;/&gt;\n      &lt;facet name=&quot;Versionable&quot;/&gt;\n      &lt;facet name=&quot;Folderish&quot;/&gt;\n      &lt;subtypes&gt;\n        &lt;type&gt;NXComponent&lt;/type&gt;\n        &lt;type&gt;NXService&lt;/type&gt;\n        &lt;type&gt;NXExtensionPoint&lt;/type&gt;\n        &lt;type&gt;NXContribution&lt;/type&gt;\n      &lt;/subtypes&gt;\n    &lt;/doctype&gt;"
                },
                {
                  "documentation": "",
                  "id": "NXComponent",
                  "label": "doctype NXComponent",
                  "rawXml": "<doctype extends=\"OrderedFolder\" name=\"NXComponent\">\n      <schema name=\"common\"/>\n      <schema name=\"dublincore\"/>\n      <schema name=\"file\"/>\n      <schema name=\"nxcomponent\"/>\n\n      <facet name=\"Commentable\"/>\n      <facet name=\"Versionable\"/>\n      <facet name=\"Folderish\"/>\n      <subtypes>\n        <type>NXService</type>\n        <type>NXExtensionPoint</type>\n        <type>NXContribution</type>\n      </subtypes>\n    </doctype>",
                  "xml": "&lt;doctype extends=&quot;OrderedFolder&quot; name=&quot;NXComponent&quot;&gt;\n      &lt;schema name=&quot;common&quot;/&gt;\n      &lt;schema name=&quot;dublincore&quot;/&gt;\n      &lt;schema name=&quot;file&quot;/&gt;\n      &lt;schema name=&quot;nxcomponent&quot;/&gt;\n\n      &lt;facet name=&quot;Commentable&quot;/&gt;\n      &lt;facet name=&quot;Versionable&quot;/&gt;\n      &lt;facet name=&quot;Folderish&quot;/&gt;\n      &lt;subtypes&gt;\n        &lt;type&gt;NXService&lt;/type&gt;\n        &lt;type&gt;NXExtensionPoint&lt;/type&gt;\n        &lt;type&gt;NXContribution&lt;/type&gt;\n      &lt;/subtypes&gt;\n    &lt;/doctype&gt;"
                },
                {
                  "documentation": "",
                  "id": "NXExtensionPoint",
                  "label": "doctype NXExtensionPoint",
                  "rawXml": "<doctype extends=\"OrderedFolder\" name=\"NXExtensionPoint\">\n      <schema name=\"common\"/>\n      <schema name=\"dublincore\"/>\n      <schema name=\"file\"/>\n      <schema name=\"nxextensionpoint\"/>\n      <schema name=\"apidoccommon\"/>\n\n      <facet name=\"Commentable\"/>\n      <facet name=\"Versionable\"/>\n      <facet name=\"Folderish\"/>\n    </doctype>",
                  "xml": "&lt;doctype extends=&quot;OrderedFolder&quot; name=&quot;NXExtensionPoint&quot;&gt;\n      &lt;schema name=&quot;common&quot;/&gt;\n      &lt;schema name=&quot;dublincore&quot;/&gt;\n      &lt;schema name=&quot;file&quot;/&gt;\n      &lt;schema name=&quot;nxextensionpoint&quot;/&gt;\n      &lt;schema name=&quot;apidoccommon&quot;/&gt;\n\n      &lt;facet name=&quot;Commentable&quot;/&gt;\n      &lt;facet name=&quot;Versionable&quot;/&gt;\n      &lt;facet name=&quot;Folderish&quot;/&gt;\n    &lt;/doctype&gt;"
                },
                {
                  "documentation": "",
                  "id": "NXContribution",
                  "label": "doctype NXContribution",
                  "rawXml": "<doctype extends=\"Document\" name=\"NXContribution\">\n      <schema name=\"common\"/>\n      <schema name=\"dublincore\"/>\n      <schema name=\"file\"/>\n      <schema name=\"nxcontribution\"/>\n      <schema name=\"apidoccommon\"/>\n\n      <facet name=\"Commentable\"/>\n      <facet name=\"Versionable\"/>\n    </doctype>",
                  "xml": "&lt;doctype extends=&quot;Document&quot; name=&quot;NXContribution&quot;&gt;\n      &lt;schema name=&quot;common&quot;/&gt;\n      &lt;schema name=&quot;dublincore&quot;/&gt;\n      &lt;schema name=&quot;file&quot;/&gt;\n      &lt;schema name=&quot;nxcontribution&quot;/&gt;\n      &lt;schema name=&quot;apidoccommon&quot;/&gt;\n\n      &lt;facet name=&quot;Commentable&quot;/&gt;\n      &lt;facet name=&quot;Versionable&quot;/&gt;\n    &lt;/doctype&gt;"
                },
                {
                  "documentation": "",
                  "id": "NXService",
                  "label": "doctype NXService",
                  "rawXml": "<doctype extends=\"Document\" name=\"NXService\">\n      <schema name=\"common\"/>\n      <schema name=\"dublincore\"/>\n      <schema name=\"file\"/>\n      <schema name=\"nxservice\"/>\n\n      <facet name=\"Commentable\"/>\n      <facet name=\"Versionable\"/>\n    </doctype>",
                  "xml": "&lt;doctype extends=&quot;Document&quot; name=&quot;NXService&quot;&gt;\n      &lt;schema name=&quot;common&quot;/&gt;\n      &lt;schema name=&quot;dublincore&quot;/&gt;\n      &lt;schema name=&quot;file&quot;/&gt;\n      &lt;schema name=&quot;nxservice&quot;/&gt;\n\n      &lt;facet name=&quot;Commentable&quot;/&gt;\n      &lt;facet name=&quot;Versionable&quot;/&gt;\n    &lt;/doctype&gt;"
                },
                {
                  "documentation": "",
                  "id": "NXOperation",
                  "label": "doctype NXOperation",
                  "rawXml": "<doctype extends=\"Document\" name=\"NXOperation\">\n      <schema name=\"common\"/>\n      <schema name=\"dublincore\"/>\n      <schema name=\"file\"/>\n\n      <schema name=\"nxoperation\"/>\n      <facet name=\"Commentable\"/>\n      <facet name=\"Versionable\"/>\n    </doctype>",
                  "xml": "&lt;doctype extends=&quot;Document&quot; name=&quot;NXOperation&quot;&gt;\n      &lt;schema name=&quot;common&quot;/&gt;\n      &lt;schema name=&quot;dublincore&quot;/&gt;\n      &lt;schema name=&quot;file&quot;/&gt;\n\n      &lt;schema name=&quot;nxoperation&quot;/&gt;\n      &lt;facet name=&quot;Commentable&quot;/&gt;\n      &lt;facet name=&quot;Versionable&quot;/&gt;\n    &lt;/doctype&gt;"
                },
                {
                  "documentation": "",
                  "id": "NXPackage",
                  "label": "doctype NXPackage",
                  "rawXml": "<doctype extends=\"Document\" name=\"NXPackage\">\n      <schema name=\"common\"/>\n      <schema name=\"dublincore\"/>\n\n      <schema name=\"nxpackage\"/>\n      <facet name=\"Commentable\"/>\n      <facet name=\"Versionable\"/>\n    </doctype>",
                  "xml": "&lt;doctype extends=&quot;Document&quot; name=&quot;NXPackage&quot;&gt;\n      &lt;schema name=&quot;common&quot;/&gt;\n      &lt;schema name=&quot;dublincore&quot;/&gt;\n\n      &lt;schema name=&quot;nxpackage&quot;/&gt;\n      &lt;facet name=&quot;Commentable&quot;/&gt;\n      &lt;facet name=&quot;Versionable&quot;/&gt;\n    &lt;/doctype&gt;"
                }
              ],
              "documentation": "\n      These contributions provide document types that handle persistence of introspected distributions.\n    \n",
              "documentationHtml": "<p/>\nThese contributions provide document types that handle persistence of introspected distributions.\n<p/>",
              "extensionPoint": "org.nuxeo.ecm.core.schema.TypeService--doctype",
              "hierarchyPath": "/grp:org.nuxeo.ecm.platform/grp:org.nuxeo.apidoc/org.nuxeo.apidoc.repo/org.nuxeo.apidoc.doctypeContrib/Contributions/org.nuxeo.apidoc.doctypeContrib--doctype",
              "id": "org.nuxeo.apidoc.doctypeContrib--doctype",
              "targetComponentName": {
                "rawName": "service:org.nuxeo.ecm.core.schema.TypeService",
                "name": "org.nuxeo.ecm.core.schema.TypeService",
                "type": "service"
              },
              "version": "mockTestVersion",
              "xml": "<extension point=\"doctype\" target=\"org.nuxeo.ecm.core.schema.TypeService\">\n    <documentation>\n      These contributions provide document types that handle persistence of introspected distributions.\n    </documentation>\n\n    <doctype extends=\"Folder\" name=\"NXDistribution\">\n      <schema name=\"common\"/>\n      <schema name=\"dublincore\"/>\n      <schema name=\"file\"/>\n      <schema name=\"nxdistribution\"/>\n\n      <facet name=\"Commentable\"/>\n      <facet name=\"Versionable\"/>\n      <facet name=\"Folderish\"/>\n\n      <subtypes>\n        <type>NXBundleGroup</type>\n        <type>NXBundle</type>\n        <type>NXOperation</type>\n        <type>NXPackage</type>\n        <type>Workspace</type>\n      </subtypes>\n    </doctype>\n\n    <doctype extends=\"OrderedFolder\" name=\"NXBundleGroup\">\n      <schema name=\"common\"/>\n      <schema name=\"dublincore\"/>\n      <schema name=\"file\"/>\n      <schema name=\"files\"/>\n      <schema name=\"nxbundlegroup\"/>\n\n      <facet name=\"Commentable\"/>\n      <facet name=\"Versionable\"/>\n      <facet name=\"Folderish\"/>\n\n      <subtypes>\n        <type>NXBundleGroup</type>\n      </subtypes>\n    </doctype>\n\n\n    <doctype extends=\"OrderedFolder\" name=\"NXBundle\">\n      <schema name=\"common\"/>\n      <schema name=\"dublincore\"/>\n      <schema name=\"file\"/>\n      <schema name=\"nxbundle\"/>\n\n      <facet name=\"Commentable\"/>\n      <facet name=\"Versionable\"/>\n      <facet name=\"Folderish\"/>\n      <subtypes>\n        <type>NXComponent</type>\n        <type>NXService</type>\n        <type>NXExtensionPoint</type>\n        <type>NXContribution</type>\n      </subtypes>\n    </doctype>\n\n    <doctype extends=\"OrderedFolder\" name=\"NXComponent\">\n      <schema name=\"common\"/>\n      <schema name=\"dublincore\"/>\n      <schema name=\"file\"/>\n      <schema name=\"nxcomponent\"/>\n\n      <facet name=\"Commentable\"/>\n      <facet name=\"Versionable\"/>\n      <facet name=\"Folderish\"/>\n      <subtypes>\n        <type>NXService</type>\n        <type>NXExtensionPoint</type>\n        <type>NXContribution</type>\n      </subtypes>\n    </doctype>\n\n    <doctype extends=\"OrderedFolder\" name=\"NXExtensionPoint\">\n      <schema name=\"common\"/>\n      <schema name=\"dublincore\"/>\n      <schema name=\"file\"/>\n      <schema name=\"nxextensionpoint\"/>\n      <schema name=\"apidoccommon\"/>\n\n      <facet name=\"Commentable\"/>\n      <facet name=\"Versionable\"/>\n      <facet name=\"Folderish\"/>\n    </doctype>\n\n    <doctype extends=\"Document\" name=\"NXContribution\">\n      <schema name=\"common\"/>\n      <schema name=\"dublincore\"/>\n      <schema name=\"file\"/>\n      <schema name=\"nxcontribution\"/>\n      <schema name=\"apidoccommon\"/>\n\n      <facet name=\"Commentable\"/>\n      <facet name=\"Versionable\"/>\n    </doctype>\n\n    <doctype extends=\"Document\" name=\"NXService\">\n      <schema name=\"common\"/>\n      <schema name=\"dublincore\"/>\n      <schema name=\"file\"/>\n      <schema name=\"nxservice\"/>\n\n      <facet name=\"Commentable\"/>\n      <facet name=\"Versionable\"/>\n    </doctype>\n\n    <doctype extends=\"Document\" name=\"NXOperation\">\n      <schema name=\"common\"/>\n      <schema name=\"dublincore\"/>\n      <schema name=\"file\"/>\n\n      <schema name=\"nxoperation\"/>\n      <facet name=\"Commentable\"/>\n      <facet name=\"Versionable\"/>\n    </doctype>\n\n    <doctype extends=\"Document\" name=\"NXPackage\">\n      <schema name=\"common\"/>\n      <schema name=\"dublincore\"/>\n\n      <schema name=\"nxpackage\"/>\n      <facet name=\"Commentable\"/>\n      <facet name=\"Versionable\"/>\n    </doctype>\n\n  </extension>"
            }
          ],
          "hierarchyPath": "/grp:org.nuxeo.ecm.platform/grp:org.nuxeo.apidoc/org.nuxeo.apidoc.repo/org.nuxeo.apidoc.doctypeContrib",
          "name": "org.nuxeo.apidoc.doctypeContrib",
          "registrationOrder": 83,
          "requirements": [],
          "services": [],
          "version": "mockTestVersion",
          "xmlFileContent": "<?xml version=\"1.0\"?>\n<component name=\"org.nuxeo.apidoc.doctypeContrib\">\n\n  <extension target=\"org.nuxeo.ecm.core.schema.TypeService\" point=\"doctype\">\n    <documentation>\n      These contributions provide document types that handle persistence of introspected distributions.\n    </documentation>\n\n    <doctype name=\"NXDistribution\" extends=\"Folder\">\n      <schema name=\"common\" />\n      <schema name=\"dublincore\" />\n      <schema name=\"file\" />\n      <schema name=\"nxdistribution\" />\n\n      <facet name=\"Commentable\" />\n      <facet name=\"Versionable\" />\n      <facet name=\"Folderish\" />\n\n      <subtypes>\n        <type>NXBundleGroup</type>\n        <type>NXBundle</type>\n        <type>NXOperation</type>\n        <type>NXPackage</type>\n        <type>Workspace</type>\n      </subtypes>\n    </doctype>\n\n    <doctype name=\"NXBundleGroup\" extends=\"OrderedFolder\">\n      <schema name=\"common\" />\n      <schema name=\"dublincore\" />\n      <schema name=\"file\" />\n      <schema name=\"files\" />\n      <schema name=\"nxbundlegroup\" />\n\n      <facet name=\"Commentable\" />\n      <facet name=\"Versionable\" />\n      <facet name=\"Folderish\" />\n\n      <subtypes>\n        <type>NXBundleGroup</type>\n      </subtypes>\n    </doctype>\n\n\n    <doctype name=\"NXBundle\" extends=\"OrderedFolder\">\n      <schema name=\"common\" />\n      <schema name=\"dublincore\" />\n      <schema name=\"file\" />\n      <schema name=\"nxbundle\" />\n\n      <facet name=\"Commentable\" />\n      <facet name=\"Versionable\" />\n      <facet name=\"Folderish\" />\n      <subtypes>\n        <type>NXComponent</type>\n        <type>NXService</type>\n        <type>NXExtensionPoint</type>\n        <type>NXContribution</type>\n      </subtypes>\n    </doctype>\n\n    <doctype name=\"NXComponent\" extends=\"OrderedFolder\">\n      <schema name=\"common\" />\n      <schema name=\"dublincore\" />\n      <schema name=\"file\" />\n      <schema name=\"nxcomponent\" />\n\n      <facet name=\"Commentable\" />\n      <facet name=\"Versionable\" />\n      <facet name=\"Folderish\" />\n      <subtypes>\n        <type>NXService</type>\n        <type>NXExtensionPoint</type>\n        <type>NXContribution</type>\n      </subtypes>\n    </doctype>\n\n    <doctype name=\"NXExtensionPoint\" extends=\"OrderedFolder\">\n      <schema name=\"common\" />\n      <schema name=\"dublincore\" />\n      <schema name=\"file\" />\n      <schema name=\"nxextensionpoint\" />\n      <schema name=\"apidoccommon\" />\n\n      <facet name=\"Commentable\" />\n      <facet name=\"Versionable\" />\n      <facet name=\"Folderish\" />\n    </doctype>\n\n    <doctype name=\"NXContribution\" extends=\"Document\">\n      <schema name=\"common\" />\n      <schema name=\"dublincore\" />\n      <schema name=\"file\" />\n      <schema name=\"nxcontribution\" />\n      <schema name=\"apidoccommon\" />\n\n      <facet name=\"Commentable\" />\n      <facet name=\"Versionable\" />\n    </doctype>\n\n    <doctype name=\"NXService\" extends=\"Document\">\n      <schema name=\"common\" />\n      <schema name=\"dublincore\" />\n      <schema name=\"file\" />\n      <schema name=\"nxservice\" />\n\n      <facet name=\"Commentable\" />\n      <facet name=\"Versionable\" />\n    </doctype>\n\n    <doctype name=\"NXOperation\" extends=\"Document\">\n      <schema name=\"common\" />\n      <schema name=\"dublincore\" />\n      <schema name=\"file\" />\n\n      <schema name=\"nxoperation\" />\n      <facet name=\"Commentable\" />\n      <facet name=\"Versionable\" />\n    </doctype>\n\n    <doctype name=\"NXPackage\" extends=\"Document\">\n      <schema name=\"common\" />\n      <schema name=\"dublincore\" />\n\n      <schema name=\"nxpackage\" />\n      <facet name=\"Commentable\" />\n      <facet name=\"Versionable\" />\n    </doctype>\n\n  </extension>\n\n</component>\n",
          "xmlFileName": "mockTestXmlFileName",
          "xmlPureComponent": true
        },
        {
          "@type": "NXComponent",
          "documentationHtml": "",
          "extensionPoints": [],
          "extensions": [
            {
              "@type": "NXContribution",
              "contributionItems": [
                {
                  "documentation": "",
                  "id": null,
                  "label": "types",
                  "rawXml": "<types>\n      <type name=\"NXDistribution\">default</type>\n      <type name=\"NXBundleGroup\">default</type>\n      <type name=\"NXBundle\">default</type>\n      <type name=\"NXComponent\">default</type>\n      <type name=\"NXService\">default</type>\n      <type name=\"NXExtensionPoint\">default</type>\n      <type name=\"NXContribution\">default</type>\n      <type name=\"NXOperation\">default</type>\n    </types>",
                  "xml": "&lt;types&gt;\n      &lt;type name=&quot;NXDistribution&quot;&gt;default&lt;/type&gt;\n      &lt;type name=&quot;NXBundleGroup&quot;&gt;default&lt;/type&gt;\n      &lt;type name=&quot;NXBundle&quot;&gt;default&lt;/type&gt;\n      &lt;type name=&quot;NXComponent&quot;&gt;default&lt;/type&gt;\n      &lt;type name=&quot;NXService&quot;&gt;default&lt;/type&gt;\n      &lt;type name=&quot;NXExtensionPoint&quot;&gt;default&lt;/type&gt;\n      &lt;type name=&quot;NXContribution&quot;&gt;default&lt;/type&gt;\n      &lt;type name=&quot;NXOperation&quot;&gt;default&lt;/type&gt;\n    &lt;/types&gt;"
                }
              ],
              "documentationHtml": "",
              "extensionPoint": "org.nuxeo.ecm.core.lifecycle.LifeCycleService--types",
              "hierarchyPath": "/grp:org.nuxeo.ecm.platform/grp:org.nuxeo.apidoc/org.nuxeo.apidoc.repo/org.nuxeo.apidoc.lifecycle.contrib/Contributions/org.nuxeo.apidoc.lifecycle.contrib--types",
              "id": "org.nuxeo.apidoc.lifecycle.contrib--types",
              "targetComponentName": {
                "rawName": "service:org.nuxeo.ecm.core.lifecycle.LifeCycleService",
                "name": "org.nuxeo.ecm.core.lifecycle.LifeCycleService",
                "type": "service"
              },
              "version": "mockTestVersion",
              "xml": "<extension point=\"types\" target=\"org.nuxeo.ecm.core.lifecycle.LifeCycleService\">\n    <types>\n      <type name=\"NXDistribution\">default</type>\n      <type name=\"NXBundleGroup\">default</type>\n      <type name=\"NXBundle\">default</type>\n      <type name=\"NXComponent\">default</type>\n      <type name=\"NXService\">default</type>\n      <type name=\"NXExtensionPoint\">default</type>\n      <type name=\"NXContribution\">default</type>\n      <type name=\"NXOperation\">default</type>\n    </types>\n  </extension>"
            }
          ],
          "hierarchyPath": "/grp:org.nuxeo.ecm.platform/grp:org.nuxeo.apidoc/org.nuxeo.apidoc.repo/org.nuxeo.apidoc.lifecycle.contrib",
          "name": "org.nuxeo.apidoc.lifecycle.contrib",
          "registrationOrder": 107,
          "requirements": [],
          "services": [],
          "version": "mockTestVersion",
          "xmlFileContent": "<?xml version=\"1.0\"?>\n<component name=\"org.nuxeo.apidoc.lifecycle.contrib\">\n\n  <extension target=\"org.nuxeo.ecm.core.lifecycle.LifeCycleService\" point=\"types\">\n    <types>\n      <type name=\"NXDistribution\">default</type>\n      <type name=\"NXBundleGroup\">default</type>\n      <type name=\"NXBundle\">default</type>\n      <type name=\"NXComponent\">default</type>\n      <type name=\"NXService\">default</type>\n      <type name=\"NXExtensionPoint\">default</type>\n      <type name=\"NXContribution\">default</type>\n      <type name=\"NXOperation\">default</type>\n    </types>\n  </extension>\n\n</component>\n",
          "xmlFileName": "mockTestXmlFileName",
          "xmlPureComponent": true
        },
        {
          "@type": "NXComponent",
          "documentationHtml": "",
          "extensionPoints": [],
          "extensions": [
            {
              "@type": "NXContribution",
              "contributionItems": [
                {
                  "documentation": "",
                  "id": "nxbundle",
                  "label": "schema nxbundle",
                  "rawXml": "<schema name=\"nxbundle\" prefix=\"nxbundle\" src=\"schemas/nxbundle.xsd\"/>",
                  "xml": "&lt;schema name=&quot;nxbundle&quot; prefix=&quot;nxbundle&quot; src=&quot;schemas/nxbundle.xsd&quot;/&gt;"
                },
                {
                  "documentation": "",
                  "id": "nxbundlegroup",
                  "label": "schema nxbundlegroup",
                  "rawXml": "<schema name=\"nxbundlegroup\" prefix=\"nxbundlegroup\" src=\"schemas/nxbundlegroup.xsd\"/>",
                  "xml": "&lt;schema name=&quot;nxbundlegroup&quot; prefix=&quot;nxbundlegroup&quot; src=&quot;schemas/nxbundlegroup.xsd&quot;/&gt;"
                },
                {
                  "documentation": "",
                  "id": "nxcomponent",
                  "label": "schema nxcomponent",
                  "rawXml": "<schema name=\"nxcomponent\" prefix=\"nxcomponent\" src=\"schemas/nxcomponent.xsd\"/>",
                  "xml": "&lt;schema name=&quot;nxcomponent&quot; prefix=&quot;nxcomponent&quot; src=&quot;schemas/nxcomponent.xsd&quot;/&gt;"
                },
                {
                  "documentation": "",
                  "id": "nxcontribution",
                  "label": "schema nxcontribution",
                  "rawXml": "<schema name=\"nxcontribution\" prefix=\"nxcontribution\" src=\"schemas/nxcontribution.xsd\"/>",
                  "xml": "&lt;schema name=&quot;nxcontribution&quot; prefix=&quot;nxcontribution&quot; src=&quot;schemas/nxcontribution.xsd&quot;/&gt;"
                },
                {
                  "documentation": "",
                  "id": "nxdistribution",
                  "label": "schema nxdistribution",
                  "rawXml": "<schema name=\"nxdistribution\" prefix=\"nxdistribution\" src=\"schemas/nxdistribution.xsd\"/>",
                  "xml": "&lt;schema name=&quot;nxdistribution&quot; prefix=&quot;nxdistribution&quot; src=&quot;schemas/nxdistribution.xsd&quot;/&gt;"
                },
                {
                  "documentation": "",
                  "id": "nxextensionpoint",
                  "label": "schema nxextensionpoint",
                  "rawXml": "<schema name=\"nxextensionpoint\" prefix=\"nxextensionpoint\" src=\"schemas/nxextensionpoint.xsd\"/>",
                  "xml": "&lt;schema name=&quot;nxextensionpoint&quot; prefix=&quot;nxextensionpoint&quot; src=&quot;schemas/nxextensionpoint.xsd&quot;/&gt;"
                },
                {
                  "documentation": "",
                  "id": "nxservice",
                  "label": "schema nxservice",
                  "rawXml": "<schema name=\"nxservice\" prefix=\"nxservice\" src=\"schemas/nxservice.xsd\"/>",
                  "xml": "&lt;schema name=&quot;nxservice&quot; prefix=&quot;nxservice&quot; src=&quot;schemas/nxservice.xsd&quot;/&gt;"
                },
                {
                  "documentation": "",
                  "id": "nxoperation",
                  "label": "schema nxoperation",
                  "rawXml": "<schema name=\"nxoperation\" prefix=\"nxop\" src=\"schemas/nxoperation.xsd\"/>",
                  "xml": "&lt;schema name=&quot;nxoperation&quot; prefix=&quot;nxop&quot; src=&quot;schemas/nxoperation.xsd&quot;/&gt;"
                },
                {
                  "documentation": "",
                  "id": "nxpackage",
                  "label": "schema nxpackage",
                  "rawXml": "<schema name=\"nxpackage\" prefix=\"nxpackage\" src=\"schemas/nxpackage.xsd\"/>",
                  "xml": "&lt;schema name=&quot;nxpackage&quot; prefix=&quot;nxpackage&quot; src=&quot;schemas/nxpackage.xsd&quot;/&gt;"
                },
                {
                  "documentation": "",
                  "id": "apidoccommon",
                  "label": "schema apidoccommon",
                  "rawXml": "<schema name=\"apidoccommon\" prefix=\"adc\" src=\"schemas/apidoccommon.xsd\"/>",
                  "xml": "&lt;schema name=&quot;apidoccommon&quot; prefix=&quot;adc&quot; src=&quot;schemas/apidoccommon.xsd&quot;/&gt;"
                }
              ],
              "documentationHtml": "",
              "extensionPoint": "org.nuxeo.ecm.core.schema.TypeService--schema",
              "hierarchyPath": "/grp:org.nuxeo.ecm.platform/grp:org.nuxeo.apidoc/org.nuxeo.apidoc.repo/org.nuxeo.apidoc.schemaContrib/Contributions/org.nuxeo.apidoc.schemaContrib--schema",
              "id": "org.nuxeo.apidoc.schemaContrib--schema",
              "targetComponentName": {
                "rawName": "service:org.nuxeo.ecm.core.schema.TypeService",
                "name": "org.nuxeo.ecm.core.schema.TypeService",
                "type": "service"
              },
              "version": "mockTestVersion",
              "xml": "<extension point=\"schema\" target=\"org.nuxeo.ecm.core.schema.TypeService\">\n\n    <schema name=\"nxbundle\" prefix=\"nxbundle\" src=\"schemas/nxbundle.xsd\"/>\n    <schema name=\"nxbundlegroup\" prefix=\"nxbundlegroup\" src=\"schemas/nxbundlegroup.xsd\"/>\n    <schema name=\"nxcomponent\" prefix=\"nxcomponent\" src=\"schemas/nxcomponent.xsd\"/>\n    <schema name=\"nxcontribution\" prefix=\"nxcontribution\" src=\"schemas/nxcontribution.xsd\"/>\n    <schema name=\"nxdistribution\" prefix=\"nxdistribution\" src=\"schemas/nxdistribution.xsd\"/>\n    <schema name=\"nxextensionpoint\" prefix=\"nxextensionpoint\" src=\"schemas/nxextensionpoint.xsd\"/>\n    <schema name=\"nxservice\" prefix=\"nxservice\" src=\"schemas/nxservice.xsd\"/>\n    <schema name=\"nxoperation\" prefix=\"nxop\" src=\"schemas/nxoperation.xsd\"/>\n    <schema name=\"nxpackage\" prefix=\"nxpackage\" src=\"schemas/nxpackage.xsd\"/>\n    <schema name=\"apidoccommon\" prefix=\"adc\" src=\"schemas/apidoccommon.xsd\"/>\n\n  </extension>"
            }
          ],
          "hierarchyPath": "/grp:org.nuxeo.ecm.platform/grp:org.nuxeo.apidoc/org.nuxeo.apidoc.repo/org.nuxeo.apidoc.schemaContrib",
          "name": "org.nuxeo.apidoc.schemaContrib",
          "registrationOrder": 162,
          "requirements": [
            "org.nuxeo.ecm.core.CoreExtensions"
          ],
          "services": [],
          "version": "mockTestVersion",
          "xmlFileContent": "<?xml version=\"1.0\"?>\n<component name=\"org.nuxeo.apidoc.schemaContrib\">\n  <require>org.nuxeo.ecm.core.CoreExtensions</require>\n  <extension target=\"org.nuxeo.ecm.core.schema.TypeService\" point=\"schema\">\n\n    <schema name=\"nxbundle\" src=\"schemas/nxbundle.xsd\" prefix=\"nxbundle\" />\n    <schema name=\"nxbundlegroup\" src=\"schemas/nxbundlegroup.xsd\" prefix=\"nxbundlegroup\" />\n    <schema name=\"nxcomponent\" src=\"schemas/nxcomponent.xsd\" prefix=\"nxcomponent\" />\n    <schema name=\"nxcontribution\" src=\"schemas/nxcontribution.xsd\" prefix=\"nxcontribution\" />\n    <schema name=\"nxdistribution\" src=\"schemas/nxdistribution.xsd\" prefix=\"nxdistribution\" />\n    <schema name=\"nxextensionpoint\" src=\"schemas/nxextensionpoint.xsd\" prefix=\"nxextensionpoint\" />\n    <schema name=\"nxservice\" src=\"schemas/nxservice.xsd\" prefix=\"nxservice\" />\n    <schema name=\"nxoperation\" src=\"schemas/nxoperation.xsd\" prefix=\"nxop\" />\n    <schema name=\"nxpackage\" src=\"schemas/nxpackage.xsd\" prefix=\"nxpackage\" />\n    <schema name=\"apidoccommon\" src=\"schemas/apidoccommon.xsd\" prefix=\"adc\" />\n\n  </extension>\n</component>\n",
          "xmlFileName": "mockTestXmlFileName",
          "xmlPureComponent": true
        },
        {
          "@type": "NXComponent",
          "documentationHtml": "",
          "extensionPoints": [],
          "extensions": [
            {
              "@type": "NXContribution",
              "contributionItems": [
                {
                  "documentation": "",
                  "id": "apidoc-xml-extractor",
                  "label": "queue apidoc-xml-extractor",
                  "rawXml": "<queue id=\"apidoc-xml-extractor\">\n      <maxThreads>1</maxThreads>\n      <category>apidoc-xml-extractor</category>\n    </queue>",
                  "xml": "&lt;queue id=&quot;apidoc-xml-extractor&quot;&gt;\n      &lt;maxThreads&gt;1&lt;/maxThreads&gt;\n      &lt;category&gt;apidoc-xml-extractor&lt;/category&gt;\n    &lt;/queue&gt;"
                }
              ],
              "documentationHtml": "",
              "extensionPoint": "org.nuxeo.ecm.core.work.service--queues",
              "hierarchyPath": "/grp:org.nuxeo.ecm.platform/grp:org.nuxeo.apidoc/org.nuxeo.apidoc.repo/org.nuxeo.apidoc.test.works/Contributions/org.nuxeo.apidoc.test.works--queues",
              "id": "org.nuxeo.apidoc.test.works--queues",
              "targetComponentName": {
                "rawName": "service:org.nuxeo.ecm.core.work.service",
                "name": "org.nuxeo.ecm.core.work.service",
                "type": "service"
              },
              "version": "mockTestVersion",
              "xml": "<extension point=\"queues\" target=\"org.nuxeo.ecm.core.work.service\">\n    <queue id=\"apidoc-xml-extractor\">\n      <maxThreads>1</maxThreads>\n      <category>apidoc-xml-extractor</category>\n    </queue>\n  </extension>"
            },
            {
              "@type": "NXContribution",
              "contributionItems": [
                {
                  "documentation": "",
                  "id": "apidoc-xml-extractor-2",
                  "label": "queue apidoc-xml-extractor-2",
                  "rawXml": "<queue id=\"apidoc-xml-extractor-2\">\n      <maxThreads>1</maxThreads>\n      <category>apidoc-xml-extractor-2</category>\n    </queue>",
                  "xml": "&lt;queue id=&quot;apidoc-xml-extractor-2&quot;&gt;\n      &lt;maxThreads&gt;1&lt;/maxThreads&gt;\n      &lt;category&gt;apidoc-xml-extractor-2&lt;/category&gt;\n    &lt;/queue&gt;"
                }
              ],
              "documentationHtml": "",
              "extensionPoint": "org.nuxeo.ecm.core.work.service--queues",
              "hierarchyPath": "/grp:org.nuxeo.ecm.platform/grp:org.nuxeo.apidoc/org.nuxeo.apidoc.repo/org.nuxeo.apidoc.test.works/Contributions/org.nuxeo.apidoc.test.works--queues1",
              "id": "org.nuxeo.apidoc.test.works--queues1",
              "targetComponentName": {
                "rawName": "service:org.nuxeo.ecm.core.work.service",
                "name": "org.nuxeo.ecm.core.work.service",
                "type": "service"
              },
              "version": "mockTestVersion",
              "xml": "<extension point=\"queues\" target=\"org.nuxeo.ecm.core.work.service\">\n    <queue id=\"apidoc-xml-extractor-2\">\n      <maxThreads>1</maxThreads>\n      <category>apidoc-xml-extractor-2</category>\n    </queue>\n  </extension>"
            }
          ],
          "hierarchyPath": "/grp:org.nuxeo.ecm.platform/grp:org.nuxeo.apidoc/org.nuxeo.apidoc.repo/org.nuxeo.apidoc.test.works",
          "name": "org.nuxeo.apidoc.test.works",
          "registrationOrder": 187,
          "requirements": [],
          "services": [],
          "version": "mockTestVersion",
          "xmlFileContent": "<?xml version=\"1.0\"?>\n<component name=\"org.nuxeo.apidoc.test.works\" version=\"1.0\">\n\n  <extension target=\"org.nuxeo.ecm.core.work.service\" point=\"queues\">\n    <queue id=\"apidoc-xml-extractor\">\n      <maxThreads>1</maxThreads>\n      <category>apidoc-xml-extractor</category>\n    </queue>\n  </extension>\n\n  <!-- additional contrib to the same extension point as non-regression test for NXP-19849 -->\n  <extension target=\"org.nuxeo.ecm.core.work.service\" point=\"queues\">\n    <queue id=\"apidoc-xml-extractor-2\">\n      <maxThreads>1</maxThreads>\n      <category>apidoc-xml-extractor-2</category>\n    </queue>\n  </extension>\n\n</component>\n",
          "xmlFileName": "mockTestXmlFileName",
          "xmlPureComponent": true
        }
      ],
      "fileName": "mockTestFileName",
      "groupId": "org.nuxeo.ecm.platform",
      "hierarchyPath": "/grp:org.nuxeo.ecm.platform/grp:org.nuxeo.apidoc/org.nuxeo.apidoc.repo",
      "id": "org.nuxeo.apidoc.repo",
      "location": "mockTestLocation",
      "manifest": "mockTestManifest",
      "maxRegistrationOrder": 187,
      "minRegistrationOrder": 5,
      "packages": [
        "platform-explorer-mock"
      ],
      "parentReadme": {
        "content": "## About Explorer\n\nThese modules provide an API to browse the Nuxeo distribution tree:\n\n    - BundleGroup (maven group or artificial grouping)\n      - Bundle\n        - Component\n          - Service\n          - Extension Points\n          - Contributions\n    - Operations\n    - Packages\n\nThe Nuxeo Distribution can be:\n\n - live: in memory (meaning runtime introspection)\n - persisted: saved in Nuxeo Repository as a tree of Documents\n\nThe following documentation items are also extracted:\n\n - documentation that is built-in Nuxeo Runtime descriptors\n - readme files that may be embedded inside the jar\n\n## What it can be used for\n\n - browse you distribution\n - check that a given contribution is deployed\n - play with Nuxeo Runtime\n\n## Configuration\n\nThe template `explorer-sitemode` enables the nuxeo.conf property `org.nuxeo.apidoc.site.mode` and\ndefines an anonymous user.\nThe property `org.nuxeo.apidoc.site.mode` comes with a more user friendly design and hides the current\n\"live\" distribution from display and API.\n\nThe template `explorer-virtualadmin` disables the usual `Administrator` user creation at database\ninitialization and adds a virtual admin user with name `apidocAdmin`, whose password can be changed using\nnuxeo.conf property `org.nuxeo.apidoc.apidocAdmin.password`.\n\n## Modules\n\nThis plugin is composed of 3 bundles:\n\n - nuxeo-apidoc-core: for the low level API on the live runtime\n - nuxeo-apidoc-repo: for the persistence of exported content on the Nuxeo repository\n - nuxeo-apidoc-webengine: for JAX-RS API and Webview\n",
        "digest": "mockTestDigest",
        "encoding": "UTF-8",
        "length": 1541,
        "mimeType": "text/plain",
        "name": "ReadMe.md"
      },
      "requirements": [],
      "version": "mockTestVersion"
    },
    {
      "@type": "NXBundle",
      "artifactId": "nuxeo-core",
      "artifactVersion": "mockTestArtifactVersion",
      "bundleGroup": {
        "@type": "NXBundleGroup",
        "bundleIds": [
          "org.nuxeo.ecm.core",
          "org.nuxeo.ecm.core.api",
          "org.nuxeo.ecm.core.bulk",
          "org.nuxeo.ecm.core.bulk.test",
          "org.nuxeo.ecm.core.cache",
          "org.nuxeo.ecm.core.event",
          "org.nuxeo.ecm.core.event.test",
          "org.nuxeo.ecm.core.io",
          "org.nuxeo.ecm.core.management",
          "org.nuxeo.ecm.core.mimetype",
          "org.nuxeo.ecm.core.query",
          "org.nuxeo.ecm.core.schema",
          "org.nuxeo.ecm.core.test",
          "org.nuxeo.ecm.platform.el"
        ],
        "hierarchyPath": "/grp:org.nuxeo.ecm.core",
        "id": "grp:org.nuxeo.ecm.core",
        "name": "org.nuxeo.ecm.core",
        "parentIds": [],
        "readmes": [],
        "version": "mockTestVersion"
      },
      "bundleId": "org.nuxeo.ecm.core",
      "components": [
        {
          "@type": "NXComponent",
          "componentClass": "org.nuxeo.ecm.core.lifecycle.impl.LifeCycleServiceImpl",
          "documentation": "\n\n    Service that deals with life cycle.\n\n    @version 1.0\n    @author <a href=\"mailto:ja@nuxeo.com\">Julien Anguenot</a>\n",
          "documentationHtml": "<p/>\nService that deals with life cycle.\n<p/>\n@version 1.0\n<p/>",
          "extensionPoints": [
            {
              "@type": "NXExtensionPoint",
              "componentId": "org.nuxeo.ecm.core.lifecycle.LifeCycleService",
              "descriptors": [
                "org.nuxeo.ecm.core.lifecycle.extensions.LifeCycleTypesDescriptor"
              ],
              "documentation": "\n      Extension point for registering document type to life cycle mappings.\n      <p/>\n\n      For instance, you can specify that a document type <i>File</i>\n will follow a <i>default</i>\n\n      life cycle where <i>default</i>\n is the name of a registered life cycle.\n    \n",
              "documentationHtml": "<p/>\nExtension point for registering document type to life cycle mappings.\n<p/>\nFor instance, you can specify that a document type <i>File</i>\nwill follow a <i>default</i>\n<p/>\nlife cycle where <i>default</i>\nis the name of a registered life cycle.\n<p/>",
              "hierarchyPath": "/grp:org.nuxeo.ecm.core/org.nuxeo.ecm.core/org.nuxeo.ecm.core.lifecycle.LifeCycleService/ExtensionPoints/org.nuxeo.ecm.core.lifecycle.LifeCycleService--types",
              "id": "org.nuxeo.ecm.core.lifecycle.LifeCycleService--types",
              "label": "types (org.nuxeo.ecm.core.lifecycle.LifeCycleService)",
              "name": "types",
              "version": "mockTestVersion"
            }
          ],
          "extensions": [],
          "hierarchyPath": "/grp:org.nuxeo.ecm.core/org.nuxeo.ecm.core/org.nuxeo.ecm.core.lifecycle.LifeCycleService",
          "name": "org.nuxeo.ecm.core.lifecycle.LifeCycleService",
          "registrationOrder": 166,
          "requirements": [],
          "services": [],
          "version": "mockTestVersion",
          "xmlFileContent": "<?xml version=\"1.0\"?>\n<component name=\"org.nuxeo.ecm.core.lifecycle.LifeCycleService\">\n\n  <documentation>\n    Service that deals with life cycle.\n\n    @version 1.0\n    @author <a href=\"mailto:ja@nuxeo.com\">Julien Anguenot</a>\n  </documentation>\n\n  <implementation class=\"org.nuxeo.ecm.core.lifecycle.impl.LifeCycleServiceImpl\"/>\n\n  <service>\n    <provide interface=\"org.nuxeo.ecm.core.lifecycle.LifeCycleService\" />\n  </service>\n\n  <extension-point name=\"lifecycle\">\n\n    <documentation>\n      Extension point for registering life cycle definition.\n      <p/>\n      A life cycle is a state-transition model described as an XML document.\n      <p/>\n      A life cycle within Nuxeo Core describes only the states and the\n      transitions without any security policy whatsoever. For instance, the\n      workflow service (or BPM service) will be responsible of the security\n      policy and actors involved.\n    </documentation>\n\n    <object class=\"org.nuxeo.ecm.core.lifecycle.extensions.LifeCycleDescriptor\"/>\n\n  </extension-point>\n\n  <extension-point name=\"types\">\n\n    <documentation>\n      Extension point for registering document type to life cycle mappings.\n      <p/>\n      For instance, you can specify that a document type <i>File</i> will follow a <i>default</i>\n      life cycle where <i>default</i> is the name of a registered life cycle.\n    </documentation>\n\n    <object class=\"org.nuxeo.ecm.core.lifecycle.extensions.LifeCycleTypesDescriptor\"/>\n\n  </extension-point>\n\n</component>\n",
          "xmlFileName": "mockTestXmlFileName",
          "xmlPureComponent": false
        }
      ],
      "fileName": "mockTestFileName",
      "groupId": "org.nuxeo.ecm.core",
      "hierarchyPath": "/grp:org.nuxeo.ecm.core/org.nuxeo.ecm.core",
      "id": "org.nuxeo.ecm.core",
      "location": "mockTestLocation",
      "manifest": "mockTestManifest",
      "maxRegistrationOrder": 199,
      "minRegistrationOrder": 2,
      "packages": [],
      "requirements": [
        "org.nuxeo.ecm.core.api",
        "org.nuxeo.ecm.core.event"
      ],
      "version": "mockTestVersion"
    },
    {
      "@type": "NXBundle",
      "artifactId": "nuxeo-core-api",
      "artifactVersion": "mockTestArtifactVersion",
      "bundleGroup": {
        "@type": "NXBundleGroup",
        "bundleIds": [
          "org.nuxeo.ecm.core",
          "org.nuxeo.ecm.core.api",
          "org.nuxeo.ecm.core.bulk",
          "org.nuxeo.ecm.core.bulk.test",
          "org.nuxeo.ecm.core.cache",
          "org.nuxeo.ecm.core.event",
          "org.nuxeo.ecm.core.event.test",
          "org.nuxeo.ecm.core.io",
          "org.nuxeo.ecm.core.management",
          "org.nuxeo.ecm.core.mimetype",
          "org.nuxeo.ecm.core.query",
          "org.nuxeo.ecm.core.schema",
          "org.nuxeo.ecm.core.test",
          "org.nuxeo.ecm.platform.el"
        ],
        "hierarchyPath": "/grp:org.nuxeo.ecm.core",
        "id": "grp:org.nuxeo.ecm.core",
        "name": "org.nuxeo.ecm.core",
        "parentIds": [],
        "readmes": [],
        "version": "mockTestVersion"
      },
      "bundleId": "org.nuxeo.ecm.core.api",
      "components": [
        {
          "@type": "NXComponent",
          "componentClass": "org.nuxeo.ecm.core.api.adapter.DocumentAdapterService",
          "documentation": "\n    Service providing a dynamic adapter mechanism to adapt documents to random interfaces.\n    @author Bogdan Stefanescu (bs@nuxeo.com)\n  \n",
          "documentationHtml": "<p/>\nService providing a dynamic adapter mechanism to adapt documents to random interfaces.\n<p/>",
          "extensionPoints": [
            {
              "@type": "NXExtensionPoint",
              "componentId": "org.nuxeo.ecm.core.api.DocumentAdapterService",
              "descriptors": [
                "org.nuxeo.ecm.core.api.adapter.DocumentAdapterDescriptor"
              ],
              "documentation": "\n\n      Extension Point for registering new document adapters\n      XML extensions may contain any number of 'adapter' elements of the form:\n      <adapter\n    class=\"org.nuxeo.ecm.sample.adapter.Versionable\" facet=\"Versionable\" factory=\"org.nuxeo.ecm.sample.adapter.VersionableFactory\"/>\n\n      This means any document having the facet 'facet' can be adapted to a 'class' object using the factory 'factory'\n      <p/>\n\n      The facet attribute is optional and serve to restrict the applicability of the adapter.\n      If no facet is specified the adapter will be applicable on any document.\n    \n",
              "documentationHtml": "<p/>\nExtension Point for registering new document adapters\nXML extensions may contain any number of 'adapter' elements of the form:\n<adapter\nclass=\"org.nuxeo.ecm.sample.adapter.Versionable\" facet=\"Versionable\" factory=\"org.nuxeo.ecm.sample.adapter.VersionableFactory\"/>\n<p/>\nThis means any document having the facet 'facet' can be adapted to a 'class' object using the factory 'factory'\n<p/>\nThe facet attribute is optional and serve to restrict the applicability of the adapter.\nIf no facet is specified the adapter will be applicable on any document.\n<p/>",
              "hierarchyPath": "/grp:org.nuxeo.ecm.core/org.nuxeo.ecm.core.api/org.nuxeo.ecm.core.api.DocumentAdapterService/ExtensionPoints/org.nuxeo.ecm.core.api.DocumentAdapterService--adapters",
              "id": "org.nuxeo.ecm.core.api.DocumentAdapterService--adapters",
              "label": "adapters (org.nuxeo.ecm.core.api.DocumentAdapterService)",
              "name": "adapters",
              "version": "mockTestVersion"
            }
          ],
          "extensions": [],
          "hierarchyPath": "/grp:org.nuxeo.ecm.core/org.nuxeo.ecm.core.api/org.nuxeo.ecm.core.api.DocumentAdapterService",
          "name": "org.nuxeo.ecm.core.api.DocumentAdapterService",
          "registrationOrder": 163,
          "requirements": [],
          "services": [],
          "version": "mockTestVersion",
          "xmlFileContent": "<?xml version=\"1.0\"?>\n\n<component name=\"org.nuxeo.ecm.core.api.DocumentAdapterService\" version=\"1.0.0\">\n  <documentation>\n    Service providing a dynamic adapter mechanism to adapt documents to random interfaces.\n    @author Bogdan Stefanescu (bs@nuxeo.com)\n  </documentation>\n\n  <implementation class=\"org.nuxeo.ecm.core.api.adapter.DocumentAdapterService\"/>\n\n  <service>\n    <provide\n      interface=\"org.nuxeo.ecm.core.api.adapter.DocumentAdapterService\"/>\n  </service>\n\n  <extension-point name=\"adapters\">\n\n    <documentation>\n      Extension Point for registering new document adapters\n      XML extensions may contain any number of 'adapter' elements of the form:\n      <adapter facet=\"Versionable\"\n        class=\"org.nuxeo.ecm.sample.adapter.Versionable\"\n        factory=\"org.nuxeo.ecm.sample.adapter.VersionableFactory\"/>\n      This means any document having the facet 'facet' can be adapted to a 'class' object using the factory 'factory'\n      <p/>\n      The facet attribute is optional and serve to restrict the applicability of the adapter.\n      If no facet is specified the adapter will be applicable on any document.\n    </documentation>\n\n    <object class=\"org.nuxeo.ecm.core.api.adapter.DocumentAdapterDescriptor\"/>\n\n  </extension-point>\n\n</component>\n",
          "xmlFileName": "mockTestXmlFileName",
          "xmlPureComponent": false
        }
      ],
      "fileName": "mockTestFileName",
      "groupId": "org.nuxeo.ecm.core",
      "hierarchyPath": "/grp:org.nuxeo.ecm.core/org.nuxeo.ecm.core.api",
      "id": "org.nuxeo.ecm.core.api",
      "location": "mockTestLocation",
      "manifest": "mockTestManifest",
      "maxRegistrationOrder": 188,
      "minRegistrationOrder": 0,
      "packages": [],
      "requirements": [],
      "version": "mockTestVersion"
    },
    {
      "@type": "NXBundle",
      "artifactId": "nuxeo-core-event",
      "artifactVersion": "mockTestArtifactVersion",
      "bundleGroup": {
        "@type": "NXBundleGroup",
        "bundleIds": [
          "org.nuxeo.ecm.core",
          "org.nuxeo.ecm.core.api",
          "org.nuxeo.ecm.core.bulk",
          "org.nuxeo.ecm.core.bulk.test",
          "org.nuxeo.ecm.core.cache",
          "org.nuxeo.ecm.core.event",
          "org.nuxeo.ecm.core.event.test",
          "org.nuxeo.ecm.core.io",
          "org.nuxeo.ecm.core.management",
          "org.nuxeo.ecm.core.mimetype",
          "org.nuxeo.ecm.core.query",
          "org.nuxeo.ecm.core.schema",
          "org.nuxeo.ecm.core.test",
          "org.nuxeo.ecm.platform.el"
        ],
        "hierarchyPath": "/grp:org.nuxeo.ecm.core",
        "id": "grp:org.nuxeo.ecm.core",
        "name": "org.nuxeo.ecm.core",
        "parentIds": [],
        "readmes": [],
        "version": "mockTestVersion"
      },
      "bundleId": "org.nuxeo.ecm.core.event",
      "components": [
        {
          "@type": "NXComponent",
          "componentClass": "org.nuxeo.ecm.core.work.WorkManagerImpl",
          "documentation": "\n    The WorkManager executes Work instances asynchronously.\n  \n",
          "documentationHtml": "<p/>\nThe WorkManager executes Work instances asynchronously.\n<p/>",
          "extensionPoints": [
            {
              "@type": "NXExtensionPoint",
              "componentId": "org.nuxeo.ecm.core.work.service",
              "descriptors": [
                "org.nuxeo.ecm.core.work.api.WorkQueueDescriptor"
              ],
              "documentation": "\n      Defines the characteristics of work queues:\n      <code>\n    <queue id=\"myqueue\">\n        <name>My Queue</name>\n        <maxThreads>4</maxThreads>\n        <capacity>100</capacity>\n        <clearCompletedAfterSeconds>300</clearCompletedAfterSeconds>\n        <category>somecategory1</category>\n        <category>somecategory2</category>\n    </queue>\n</code>\n\n      - id is the queue id.\n\n      - name is the human-readable name.\n\n      - maxThreads maximum number of worker threads (default 4).\n\n      - capacity when specified make the queue bounded, the scheduling of\n      new work is blocking when the queue is full (default unlimited).\n\n      - clearCompletedAfterSeconds (default 3600) is the delay after which completed work\n       may be automatically cleared from its queue. 0 means never.\n\n      - category is a list of Work categories that this queue will receive.\n      For event listeners work, the category is the listener name (or its simple class name).\n    \n",
              "documentationHtml": "<p/>\nDefines the characteristics of work queues:\n<p/><pre><code>    &lt;queue id=\"myqueue\">\n        &lt;name>My Queue&lt;/name>\n        &lt;maxThreads>4&lt;/maxThreads>\n        &lt;capacity>100&lt;/capacity>\n        &lt;clearCompletedAfterSeconds>300&lt;/clearCompletedAfterSeconds>\n        &lt;category>somecategory1&lt;/category>\n        &lt;category>somecategory2&lt;/category>\n    &lt;/queue>\n</code></pre><p/>\n- id is the queue id.\n<p/>\n- name is the human-readable name.\n<p/>\n- maxThreads maximum number of worker threads (default 4).\n<p/>\n- capacity when specified make the queue bounded, the scheduling of\nnew work is blocking when the queue is full (default unlimited).\n<p/>\n- clearCompletedAfterSeconds (default 3600) is the delay after which completed work\nmay be automatically cleared from its queue. 0 means never.\n<p/>\n- category is a list of Work categories that this queue will receive.\nFor event listeners work, the category is the listener name (or its simple class name).\n<p/>",
              "hierarchyPath": "/grp:org.nuxeo.ecm.core/org.nuxeo.ecm.core.event/org.nuxeo.ecm.core.work.service/ExtensionPoints/org.nuxeo.ecm.core.work.service--queues",
              "id": "org.nuxeo.ecm.core.work.service--queues",
              "label": "queues (org.nuxeo.ecm.core.work.service)",
              "name": "queues",
              "version": "mockTestVersion"
            }
          ],
          "extensions": [],
          "hierarchyPath": "/grp:org.nuxeo.ecm.core/org.nuxeo.ecm.core.event/org.nuxeo.ecm.core.work.service",
          "name": "org.nuxeo.ecm.core.work.service",
          "registrationOrder": 139,
          "requirements": [],
          "services": [],
          "version": "mockTestVersion",
          "xmlFileContent": "<?xml version=\"1.0\"?>\n<component name=\"org.nuxeo.ecm.core.work.service\" version=\"1.0\">\n\n  <documentation>\n    The WorkManager executes Work instances asynchronously.\n  </documentation>\n\n  <service>\n    <provide interface=\"org.nuxeo.ecm.core.work.api.WorkManager\" />\n  </service>\n\n  <implementation class=\"org.nuxeo.ecm.core.work.WorkManagerImpl\" />\n\n  <extension-point name=\"queues\">\n    <documentation>\n      Defines the characteristics of work queues:\n      <code>\n        <queue id=\"myqueue\">\n          <name>My Queue</name>\n          <maxThreads>4</maxThreads>\n          <capacity>100</capacity>\n          <clearCompletedAfterSeconds>300</clearCompletedAfterSeconds>\n          <category>somecategory1</category>\n          <category>somecategory2</category>\n        </queue>\n      </code>\n      - id is the queue id.\n\n      - name is the human-readable name.\n\n      - maxThreads maximum number of worker threads (default 4).\n\n      - capacity when specified make the queue bounded, the scheduling of\n      new work is blocking when the queue is full (default unlimited).\n\n      - clearCompletedAfterSeconds (default 3600) is the delay after which completed work\n       may be automatically cleared from its queue. 0 means never.\n\n      - category is a list of Work categories that this queue will receive.\n      For event listeners work, the category is the listener name (or its simple class name).\n    </documentation>\n\n    <object class=\"org.nuxeo.ecm.core.work.api.WorkQueueDescriptor\" />\n  </extension-point>\n\n  <extension-point name=\"implementation\">\n    <documentation>\n      Defines the implementation of the queuing mechanism:\n      <code>\n        <queuing class=\"org.nuxeo.ecm.core.redis.contribs.RedisWorkQueuing\"/>\n      </code>\n      The class must be a subclass of org.nuxeo.ecm.core.work.WorkQueuing.\n    </documentation>\n\n    <object class=\"org.nuxeo.ecm.core.work.api.WorkQueuingDescriptor\" />\n  </extension-point>\n\n</component>\n",
          "xmlFileName": "mockTestXmlFileName",
          "xmlPureComponent": false
        },
        {
          "@type": "NXComponent",
          "componentClass": "org.nuxeo.ecm.core.event.EventServiceComponent",
          "documentation": "\n    Event service\n  \n",
          "documentationHtml": "<p/>\nEvent service\n<p/>",
          "extensionPoints": [
            {
              "@type": "NXExtensionPoint",
              "componentId": "org.nuxeo.ecm.core.event.EventServiceComponent",
              "descriptors": [
                "org.nuxeo.ecm.core.event.impl.EventListenerDescriptor"
              ],
              "documentation": "\n      Extension point defining event listeners.\n\n      An event listener describes some Java code that can be executed\n      synchronously or asynchronously when an event is fired by Nuxeo code.\n\n      Example listener:\n      <code>\n    <listener async=\"false\"\n        class=\"org.nuxeo.ecm.platform.dublincore.listener.DublinCoreListener\"\n        enabled=\"true\" name=\"mylistener\" postCommit=\"false\"\n        priority=\"50\" retryCount=\"1\">\n        <event>documentCreated</event>\n        <event>documentModified</event>\n    </listener>\n</code>\n\n\n      The events listed are those for which the listener will be called.\n      If there are none, the listener is called for all events, but this is strongly\n      discouraged for performance reasons.\n\n      Listeners belong to one of three categories:\n\n      If postCommit=false then the listener is purely synchronous\n      (also called \"inline\") and executed in the same thread and transaction\n      as the code firing the event, as a regular method call.\n      The class must implement org.nuxeo.ecm.core.event.EventListener,\n      which receives events one at a time.\n\n      If postCommit=true and async=true then the listener is purely\n      asynchronous and executed at an arbitrary later point in time\n      (but after the original transaction is committed), in its own thread and transaction.\n      It may be retried if a ConcurrentUpdateException is detected.\n      The listener is executed asynchronously by the WorkManager via a Work instance\n      whose category (which determines the Work queue used) is the listener's name.\n      The class must implement org.nuxeo.ecm.core.event.PostCommitEventListener,\n      which receives a bundle of all the events raised by the original transaction.\n\n      If postCommit=true and async=false then the listener is executed synchronously\n      immediately after the original transaction is committed, but in a separate transaction.\n      It is not executed if the original transaction does a rollback.\n      All listeners in this category are executed one after the other (in priority order),\n      and only after they are all done does the main thread continue execution.\n      (However if one of the listeners takes too long it is left to run purely asynchronously\n      and the other listeners in this category are processed.)\n      The class must implement org.nuxeo.ecm.core.event.PostCommitEventListener,\n      which receives a bundle of all the events raised by the original transaction.\n\n      The priority gives a global ordering of all the listeners\n      in the same category executed for a given event.\n      The default is 0.\n\n      The retryCount specifies how many times a purely asynchronous listener\n      may retry execution if it resulted in a ConcurrentUpdateException.\n      The default is 1.\n    \n",
              "documentationHtml": "<p/>\nExtension point defining event listeners.\n<p/>\nAn event listener describes some Java code that can be executed\nsynchronously or asynchronously when an event is fired by Nuxeo code.\n<p/>\nExample listener:\n<p/><pre><code>    &lt;listener async=\"false\"\n        class=\"org.nuxeo.ecm.platform.dublincore.listener.DublinCoreListener\"\n        enabled=\"true\" name=\"mylistener\" postCommit=\"false\"\n        priority=\"50\" retryCount=\"1\">\n        &lt;event>documentCreated&lt;/event>\n        &lt;event>documentModified&lt;/event>\n    &lt;/listener>\n</code></pre><p/>\nThe events listed are those for which the listener will be called.\nIf there are none, the listener is called for all events, but this is strongly\ndiscouraged for performance reasons.\n<p/>\nListeners belong to one of three categories:\n<p/>\nIf postCommit=false then the listener is purely synchronous\n(also called \"inline\") and executed in the same thread and transaction\nas the code firing the event, as a regular method call.\nThe class must implement org.nuxeo.ecm.core.event.EventListener,\nwhich receives events one at a time.\n<p/>\nIf postCommit=true and async=true then the listener is purely\nasynchronous and executed at an arbitrary later point in time\n(but after the original transaction is committed), in its own thread and transaction.\nIt may be retried if a ConcurrentUpdateException is detected.\nThe listener is executed asynchronously by the WorkManager via a Work instance\nwhose category (which determines the Work queue used) is the listener's name.\nThe class must implement org.nuxeo.ecm.core.event.PostCommitEventListener,\nwhich receives a bundle of all the events raised by the original transaction.\n<p/>\nIf postCommit=true and async=false then the listener is executed synchronously\nimmediately after the original transaction is committed, but in a separate transaction.\nIt is not executed if the original transaction does a rollback.\nAll listeners in this category are executed one after the other (in priority order),\nand only after they are all done does the main thread continue execution.\n(However if one of the listeners takes too long it is left to run purely asynchronously\nand the other listeners in this category are processed.)\nThe class must implement org.nuxeo.ecm.core.event.PostCommitEventListener,\nwhich receives a bundle of all the events raised by the original transaction.\n<p/>\nThe priority gives a global ordering of all the listeners\nin the same category executed for a given event.\nThe default is 0.\n<p/>\nThe retryCount specifies how many times a purely asynchronous listener\nmay retry execution if it resulted in a ConcurrentUpdateException.\nThe default is 1.\n<p/>",
              "hierarchyPath": "/grp:org.nuxeo.ecm.core/org.nuxeo.ecm.core.event/org.nuxeo.ecm.core.event.EventServiceComponent/ExtensionPoints/org.nuxeo.ecm.core.event.EventServiceComponent--listener",
              "id": "org.nuxeo.ecm.core.event.EventServiceComponent--listener",
              "label": "listener (org.nuxeo.ecm.core.event.EventServiceComponent)",
              "name": "listener",
              "version": "mockTestVersion"
            }
          ],
          "extensions": [],
          "hierarchyPath": "/grp:org.nuxeo.ecm.core/org.nuxeo.ecm.core.event/org.nuxeo.ecm.core.event.EventServiceComponent",
          "name": "org.nuxeo.ecm.core.event.EventServiceComponent",
          "registrationOrder": 140,
          "requirements": [],
          "services": [],
          "version": "mockTestVersion",
          "xmlFileContent": "<?xml version=\"1.0\"?>\n<component name=\"org.nuxeo.ecm.core.event.EventServiceComponent\" version=\"1.0\">\n  <documentation>\n    Event service\n  </documentation>\n\n  <implementation class=\"org.nuxeo.ecm.core.event.EventServiceComponent\"/>\n\n  <service>\n    <provide interface=\"org.nuxeo.ecm.core.event.EventService\"/>\n    <provide interface=\"org.nuxeo.ecm.core.event.EventProducer\"/>\n    <provide interface=\"org.nuxeo.ecm.core.event.EventServiceAdmin\"/>\n  </service>\n\n  <extension-point name=\"listener\">\n    <documentation>\n      Extension point defining event listeners.\n\n      An event listener describes some Java code that can be executed\n      synchronously or asynchronously when an event is fired by Nuxeo code.\n\n      Example listener:\n      <code>\n        <listener name=\"mylistener\" enabled=\"true\"\n            postCommit=\"false\" async=\"false\"\n            class=\"org.nuxeo.ecm.platform.dublincore.listener.DublinCoreListener\"\n            priority=\"50\" retryCount=\"1\">\n          <event>documentCreated</event>\n          <event>documentModified</event>\n        </listener>\n      </code>\n\n      The events listed are those for which the listener will be called.\n      If there are none, the listener is called for all events, but this is strongly\n      discouraged for performance reasons.\n\n      Listeners belong to one of three categories:\n\n      If postCommit=false then the listener is purely synchronous\n      (also called \"inline\") and executed in the same thread and transaction\n      as the code firing the event, as a regular method call.\n      The class must implement org.nuxeo.ecm.core.event.EventListener,\n      which receives events one at a time.\n\n      If postCommit=true and async=true then the listener is purely\n      asynchronous and executed at an arbitrary later point in time\n      (but after the original transaction is committed), in its own thread and transaction.\n      It may be retried if a ConcurrentUpdateException is detected.\n      The listener is executed asynchronously by the WorkManager via a Work instance\n      whose category (which determines the Work queue used) is the listener's name.\n      The class must implement org.nuxeo.ecm.core.event.PostCommitEventListener,\n      which receives a bundle of all the events raised by the original transaction.\n\n      If postCommit=true and async=false then the listener is executed synchronously\n      immediately after the original transaction is committed, but in a separate transaction.\n      It is not executed if the original transaction does a rollback.\n      All listeners in this category are executed one after the other (in priority order),\n      and only after they are all done does the main thread continue execution.\n      (However if one of the listeners takes too long it is left to run purely asynchronously\n      and the other listeners in this category are processed.)\n      The class must implement org.nuxeo.ecm.core.event.PostCommitEventListener,\n      which receives a bundle of all the events raised by the original transaction.\n\n      The priority gives a global ordering of all the listeners\n      in the same category executed for a given event.\n      The default is 0.\n\n      The retryCount specifies how many times a purely asynchronous listener\n      may retry execution if it resulted in a ConcurrentUpdateException.\n      The default is 1.\n    </documentation>\n    <object class=\"org.nuxeo.ecm.core.event.impl.EventListenerDescriptor\"/>\n  </extension-point>\n\n  <extension-point name=\"pipe\">\n    <documentation>\n      Extension point to contribute event pipe.\n\n      An event pipe is a where Nuxeo events will be sent for asynchronous processing.\n\n      Example pipe definition:\n      <code>\n        <eventPipe name=\"dummyPipe1\" class=\"org.nuxeo.ecm.core.event.pipe.DummyPipe\" priority=\"0\">\n\t      <parameters>\n\t        <parameter name=\"foo\">bar</parameter>\n\t      </parameters>\n\t    </eventPipe>\n      </code>\n    </documentation>\n    <object class=\"org.nuxeo.ecm.core.event.pipe.EventPipeDescriptor\"/>\n  </extension-point>\n\n  <extension-point name=\"dispatcher\">\n    <documentation>\n      Extension point to define the dispatcher used to dispatch event between pipes.\n\n      Example dispatcher definition:\n      <code>\n        <eventDispatcher name=\"dispatcher\"\n                         class=\"org.nuxeo.ecm.core.event.pipe.dispatch.SimpleEventBundlePipeDispatcher\">\n           <parameters>\n             <parameter name=\"foo\">bar</parameter>\n           </parameters>\n        </eventDispatcher>\n      </code>\n    </documentation>\n    <object class=\"org.nuxeo.ecm.core.event.pipe.dispatch.EventDispatcherDescriptor\"/>\n  </extension-point>\n\n</component>\n",
          "xmlFileName": "mockTestXmlFileName",
          "xmlPureComponent": false
        }
      ],
      "fileName": "mockTestFileName",
      "groupId": "org.nuxeo.ecm.core",
      "hierarchyPath": "/grp:org.nuxeo.ecm.core/org.nuxeo.ecm.core.event",
      "id": "org.nuxeo.ecm.core.event",
      "location": "mockTestLocation",
      "manifest": "mockTestManifest",
      "maxRegistrationOrder": 202,
      "minRegistrationOrder": 79,
      "packages": [],
      "requirements": [],
      "version": "mockTestVersion"
    },
    {
      "@type": "NXBundle",
      "artifactId": "nuxeo-core-schema",
      "artifactVersion": "mockTestArtifactVersion",
      "bundleGroup": {
        "@type": "NXBundleGroup",
        "bundleIds": [
          "org.nuxeo.ecm.core",
          "org.nuxeo.ecm.core.api",
          "org.nuxeo.ecm.core.bulk",
          "org.nuxeo.ecm.core.bulk.test",
          "org.nuxeo.ecm.core.cache",
          "org.nuxeo.ecm.core.event",
          "org.nuxeo.ecm.core.event.test",
          "org.nuxeo.ecm.core.io",
          "org.nuxeo.ecm.core.management",
          "org.nuxeo.ecm.core.mimetype",
          "org.nuxeo.ecm.core.query",
          "org.nuxeo.ecm.core.schema",
          "org.nuxeo.ecm.core.test",
          "org.nuxeo.ecm.platform.el"
        ],
        "hierarchyPath": "/grp:org.nuxeo.ecm.core",
        "id": "grp:org.nuxeo.ecm.core",
        "name": "org.nuxeo.ecm.core",
        "parentIds": [],
        "readmes": [],
        "version": "mockTestVersion"
      },
      "bundleId": "org.nuxeo.ecm.core.schema",
      "components": [
        {
          "@type": "NXComponent",
          "componentClass": "org.nuxeo.ecm.core.schema.TypeService",
          "documentation": "\n    Manage document types and schemas.\n    Allows registrering new types defined using XSD schemas\n    @author Bogdan Stefanescu (bs@nuxeo.com)\n  \n",
          "documentationHtml": "<p/>\nManage document types and schemas.\nAllows registrering new types defined using XSD schemas\n<p/>",
          "extensionPoints": [
            {
              "@type": "NXExtensionPoint",
              "componentId": "org.nuxeo.ecm.core.schema.TypeService",
              "descriptors": [
                "org.nuxeo.ecm.core.schema.DocumentTypeDescriptor",
                "org.nuxeo.ecm.core.schema.FacetDescriptor",
                "org.nuxeo.ecm.core.schema.ProxiesDescriptor"
              ],
              "documentation": "\n      Extension Point to register new document types and facets.\n      <p/>\n\n      Document types may implement several schemas and extends other\n      document types. You can compare document types with java\n      classes and schemas with java interfaces. Document types may\n      also contains several facets that define a behavior.\n      <p/>\n\n      The prefetch element defines what fields are synchronously\n      indexed, and are made available in search results listings.\n      <p/>\n\n      A doctype XML extension may contain several 'doctype' elements.\n      A doctype element may look like this:\n\n      <code>\n    <doctype extends=\"Document\" name=\"File\">\n        <schema name=\"common\"/>\n        <schema name=\"file\"/>\n        <schema name=\"dublincore\"/>\n        <schema name=\"uid\"/>\n        <facet name=\"Downloadable\"/>\n        <facet name=\"Versionable\"/>\n        <prefetch>dc:title, dc:modified, uid.uid</prefetch>\n    </doctype>\n</code>\n\n\n      Document types may also specify subtypes, which are sets of other\n      document types that can be created inside the this document type\n      being defined.\n      <p/>\n\n      This configuration only applies in the UI and will not affect\n      documents created through APIs (e.g. REST, Java)\n      This can be achieved as follows:\n\n      <code>\n    <doctype extends=\"Document\" name=\"SomeFolder\">\n        <subtypes>\n            <type>File</type>\n        </subtypes>\n    </doctype>\n</code>\n\n\n      When extending a doctype, forbidden subtypes can also be specified\n      to prevent a specific type from being created.\n      <p/>\n\n      This configuration only applies in the UI and will not affect\n      documents created through APIs (e.g. REST, Java)\n\n      <code>\n    <doctype append=\"true\" name=\"SomeFolder\">\n        <subtypes>\n            <type>SomeOtherFile</type>\n        </subtypes>\n        <subtypes-forbidden>\n            <type>File</type>\n        </subtypes-forbidden>\n    </doctype>\n</code>\n\n\n      Facets are also defined by this extension point.\n      They can have zero or more schemas:\n\n      <code>\n    <facet name=\"MyFacet\" perDocumentQuery=\"false\"/>\n    <facet name=\"MyFacetWithData\">\n        <schema name=\"myschema\"/>\n        <schema name=\"otherschema\"/>\n    </facet>\n    <facet enabled=\"false\" name=\"MyOldFacet\"/>\n</code>\n\n\n      Queries using ecm:mixinType on facets marked with\n      perDocumentQuery=\"false\" will not match any document where\n      this facet has been added using DocumentModel.addFacet() and does\n      not belong to the document type (this is done for performance reasons).\n\n      Facets with enabled=false will be ignored in all document types\n      still referencing them, and will not be returned when listing available facets.\n\n      It's also possible to associate one or more schemas to all proxies:\n      <code>\n    <proxies>\n        <schema name=\"myschema\"/>\n    </proxies>\n</code>\n",
              "documentationHtml": "<p/>\nExtension Point to register new document types and facets.\n<p/>\nDocument types may implement several schemas and extends other\ndocument types. You can compare document types with java\nclasses and schemas with java interfaces. Document types may\nalso contains several facets that define a behavior.\n<p/>\nThe prefetch element defines what fields are synchronously\nindexed, and are made available in search results listings.\n<p/>\nA doctype XML extension may contain several 'doctype' elements.\nA doctype element may look like this:\n<p/>\n<pre><code>    &lt;doctype extends=\"Document\" name=\"File\">\n        &lt;schema name=\"common\"/>\n        &lt;schema name=\"file\"/>\n        &lt;schema name=\"dublincore\"/>\n        &lt;schema name=\"uid\"/>\n        &lt;facet name=\"Downloadable\"/>\n        &lt;facet name=\"Versionable\"/>\n        &lt;prefetch>dc:title, dc:modified, uid.uid&lt;/prefetch>\n    &lt;/doctype>\n</code></pre><p/>\nDocument types may also specify subtypes, which are sets of other\ndocument types that can be created inside the this document type\nbeing defined.\n<p/>\nThis configuration only applies in the UI and will not affect\ndocuments created through APIs (e.g. REST, Java)\nThis can be achieved as follows:\n<p/>\n<pre><code>    &lt;doctype extends=\"Document\" name=\"SomeFolder\">\n        &lt;subtypes>\n            &lt;type>File&lt;/type>\n        &lt;/subtypes>\n    &lt;/doctype>\n</code></pre><p/>\nWhen extending a doctype, forbidden subtypes can also be specified\nto prevent a specific type from being created.\n<p/>\nThis configuration only applies in the UI and will not affect\ndocuments created through APIs (e.g. REST, Java)\n<p/>\n<pre><code>    &lt;doctype append=\"true\" name=\"SomeFolder\">\n        &lt;subtypes>\n            &lt;type>SomeOtherFile&lt;/type>\n        &lt;/subtypes>\n        &lt;subtypes-forbidden>\n            &lt;type>File&lt;/type>\n        &lt;/subtypes-forbidden>\n    &lt;/doctype>\n</code></pre><p/>\nFacets are also defined by this extension point.\nThey can have zero or more schemas:\n<p/>\n<pre><code>    &lt;facet name=\"MyFacet\" perDocumentQuery=\"false\"/>\n    &lt;facet name=\"MyFacetWithData\">\n        &lt;schema name=\"myschema\"/>\n        &lt;schema name=\"otherschema\"/>\n    &lt;/facet>\n    &lt;facet enabled=\"false\" name=\"MyOldFacet\"/>\n</code></pre><p/>\nQueries using ecm:mixinType on facets marked with\nperDocumentQuery=\"false\" will not match any document where\nthis facet has been added using DocumentModel.addFacet() and does\nnot belong to the document type (this is done for performance reasons).\n<p/>\nFacets with enabled=false will be ignored in all document types\nstill referencing them, and will not be returned when listing available facets.\n<p/>\nIt's also possible to associate one or more schemas to all proxies:\n<p/><pre><code>    &lt;proxies>\n        &lt;schema name=\"myschema\"/>\n    &lt;/proxies>\n</code></pre><p/>",
              "hierarchyPath": "/grp:org.nuxeo.ecm.core/org.nuxeo.ecm.core.schema/org.nuxeo.ecm.core.schema.TypeService/ExtensionPoints/org.nuxeo.ecm.core.schema.TypeService--doctype",
              "id": "org.nuxeo.ecm.core.schema.TypeService--doctype",
              "label": "doctype (org.nuxeo.ecm.core.schema.TypeService)",
              "name": "doctype",
              "version": "mockTestVersion"
            },
            {
              "@type": "NXExtensionPoint",
              "componentId": "org.nuxeo.ecm.core.schema.TypeService",
              "descriptors": [
                "org.nuxeo.ecm.core.schema.SchemaBindingDescriptor",
                "org.nuxeo.ecm.core.schema.PropertyDescriptor"
              ],
              "documentation": "\n      Extension Point to register new schemas.\n      <p/>\n\n      Schemas are defined using XSD files.\n      The schema extension XML may containg several 'schema' objects as\n      the following ones:\n      <code>\n    <schema name=\"common\" src=\"schema/common.xsd\"/>\n    <schema name=\"dublincore\" prefix=\"dc\" src=\"schema/dublincore.xsd\"/>\n</code>\n\n      The <i>name</i>\n attribute uniquely identify the schema, the <i>src</i>\n attribute specify\n      the path to that schema (relative to the bundle root) and the <i>prefix</i>\n is used as\n      a prefix (short name) of the schema namespace.\n      The schema namespace is the targetNamespace defined inside the XSD file\n      <p/>\n\n      Note that multiple schemas can share the same target namespace and prefix\n      <p/>\n\n      You can also create a Nuxeo Schema from a sub part of the XSD schema.\n      For that you can use the xsdRootElement attribute to indicate the complex type to use.\n      <code>\n    <schema name=\"employeeSchema\" src=\"schema/testExtension.xsd\" xsdRootElement=\"employee\"/>\n</code>\n\n      A schema can be completely disabled with:\n      <code>\n    <schema enabled=\"false\" name=\"myOldSchema\"/>\n</code>\n\n      Schemas with enabled=false will be ignored in all document types and facets\n      still referencing them, and will not be returned when listing available schemas.\n\n      Extension Point is also used to register additional property information, called property characteristic, such as:\n      <ul>\n    <li>secured: only administrators can edit it</li>\n    <li>deprecation: flag property as deprecated or removed</li>\n</ul>\n\n      XML extensions may contain any number of 'property' elements of the form:\n      <code>\n    <property name=\"creator\" schema=\"dublincore\" secured=\"true\"/>\n    <property deprecation=\"deprecated\" name=\"size\" schema=\"common\"/>\n    <property deprecation=\"removed\" fallback=\"content/name\"\n        name=\"filename\" schema=\"file\"/>\n</code>\n\n\n      Properties declared with secured attribute can only be edited by administrators.\n      <p/>\n\n      Properties declared with deprecation attribute enable deprecation mechanism inside Nuxeo Platform.\n      This generates WARN message of usage to help to remove deprecated usage.\n      <p/>\n\n      A contribution is one of these types:\n      <ul>\n    <li>deprecated: property still exists in schema definition, but it'll be removed in next version</li>\n    <li>removed: property has been removed from schema definition, relax platform behavior. This will avoid Nuxeo\n          property not found exceptions for remaining use of the property\n        </li>\n</ul>\n\n      The fallback attribute is optional, its value has to be a xpath referencing an existing property in the same\n      schema than deprecated/removed property.\n      When presents, it is used:\n      <ul>\n    <li>to set the value to the fallback property</li>\n    <li>to get the value from the fallback property if it exists</li>\n</ul>\n\n      Note: for a deprecated property, setValue also set value to property and getValue get value from property if\n      fallback value is null.\n      <p/>\n\n      For example, the contribution below enables WARN message of usage of property <i>file:filename</i>\n. This will also\n      get/set the value from/to <i>file:content/name</i>\n for deprecated usage of <i>file:filename</i>\n property.\n      <code>\n    <property deprecation=\"deprecated\" fallback=\"content/name\"\n        name=\"filename\" schema=\"file\"/>\n</code>\n\n      As it, each usage of this property will automatically fallback on the fallback and avoid exception from platform.\n      This will also allows to import document declaring the removed property.\n    \n",
              "documentationHtml": "<p/>\nExtension Point to register new schemas.\n<p/>\nSchemas are defined using XSD files.\nThe schema extension XML may containg several 'schema' objects as\nthe following ones:\n<p/><pre><code>    &lt;schema name=\"common\" src=\"schema/common.xsd\"/>\n    &lt;schema name=\"dublincore\" prefix=\"dc\" src=\"schema/dublincore.xsd\"/>\n</code></pre><p/>\nThe <i>name</i>\nattribute uniquely identify the schema, the <i>src</i>\nattribute specify\nthe path to that schema (relative to the bundle root) and the <i>prefix</i>\nis used as\na prefix (short name) of the schema namespace.\nThe schema namespace is the targetNamespace defined inside the XSD file\n<p/>\nNote that multiple schemas can share the same target namespace and prefix\n<p/>\nYou can also create a Nuxeo Schema from a sub part of the XSD schema.\nFor that you can use the xsdRootElement attribute to indicate the complex type to use.\n<p/><pre><code>    &lt;schema name=\"employeeSchema\" src=\"schema/testExtension.xsd\" xsdRootElement=\"employee\"/>\n</code></pre><p/>\nA schema can be completely disabled with:\n<p/><pre><code>    &lt;schema enabled=\"false\" name=\"myOldSchema\"/>\n</code></pre><p/>\nSchemas with enabled=false will be ignored in all document types and facets\nstill referencing them, and will not be returned when listing available schemas.\n<p/>\nExtension Point is also used to register additional property information, called property characteristic, such as:\n<ul>\n<li>secured: only administrators can edit it</li>\n<li>deprecation: flag property as deprecated or removed</li>\n</ul>\n<p/>\nXML extensions may contain any number of 'property' elements of the form:\n<p/><pre><code>    &lt;property name=\"creator\" schema=\"dublincore\" secured=\"true\"/>\n    &lt;property deprecation=\"deprecated\" name=\"size\" schema=\"common\"/>\n    &lt;property deprecation=\"removed\" fallback=\"content/name\"\n        name=\"filename\" schema=\"file\"/>\n</code></pre><p/>\nProperties declared with secured attribute can only be edited by administrators.\n<p/>\nProperties declared with deprecation attribute enable deprecation mechanism inside Nuxeo Platform.\nThis generates WARN message of usage to help to remove deprecated usage.\n<p/>\nA contribution is one of these types:\n<ul>\n<li>deprecated: property still exists in schema definition, but it'll be removed in next version</li>\n<li>removed: property has been removed from schema definition, relax platform behavior. This will avoid Nuxeo\nproperty not found exceptions for remaining use of the property\n</li>\n</ul>\n<p/>\nThe fallback attribute is optional, its value has to be a xpath referencing an existing property in the same\nschema than deprecated/removed property.\nWhen presents, it is used:\n<ul>\n<li>to set the value to the fallback property</li>\n<li>to get the value from the fallback property if it exists</li>\n</ul>\n<p/>\nNote: for a deprecated property, setValue also set value to property and getValue get value from property if\nfallback value is null.\n<p/>\nFor example, the contribution below enables WARN message of usage of property <i>file:filename</i>\n. This will also\nget/set the value from/to <i>file:content/name</i>\nfor deprecated usage of <i>file:filename</i>\nproperty.\n<p/><pre><code>    &lt;property deprecation=\"deprecated\" fallback=\"content/name\"\n        name=\"filename\" schema=\"file\"/>\n</code></pre><p/>\nAs it, each usage of this property will automatically fallback on the fallback and avoid exception from platform.\nThis will also allows to import document declaring the removed property.\n<p/>",
              "hierarchyPath": "/grp:org.nuxeo.ecm.core/org.nuxeo.ecm.core.schema/org.nuxeo.ecm.core.schema.TypeService/ExtensionPoints/org.nuxeo.ecm.core.schema.TypeService--schema",
              "id": "org.nuxeo.ecm.core.schema.TypeService--schema",
              "label": "schema (org.nuxeo.ecm.core.schema.TypeService)",
              "name": "schema",
              "version": "mockTestVersion"
            }
          ],
          "extensions": [],
          "hierarchyPath": "/grp:org.nuxeo.ecm.core/org.nuxeo.ecm.core.schema/org.nuxeo.ecm.core.schema.TypeService",
          "name": "org.nuxeo.ecm.core.schema.TypeService",
          "registrationOrder": 17,
          "requirements": [
            "org.nuxeo.ecm.core.schema.ObjectResolverService"
          ],
          "services": [],
          "version": "mockTestVersion",
          "xmlFileContent": "<?xml version=\"1.0\"?>\n<component name=\"org.nuxeo.ecm.core.schema.TypeService\" version=\"1.0.0\">\n  <documentation>\n    Manage document types and schemas.\n    Allows registrering new types defined using XSD schemas\n    @author Bogdan Stefanescu (bs@nuxeo.com)\n  </documentation>\n\n  <require>org.nuxeo.ecm.core.schema.ObjectResolverService</require>\n\n  <service>\n    <provide interface=\"org.nuxeo.ecm.core.schema.SchemaManager\" />\n    <provide interface=\"org.nuxeo.ecm.core.schema.TypeProvider\" />\n    <provide interface=\"org.nuxeo.ecm.core.schema.PropertyCharacteristicHandler\" />\n  </service>\n\n  <implementation class=\"org.nuxeo.ecm.core.schema.TypeService\" />\n\n  <extension-point name=\"configuration\">\n\n    <documentation>\n      Type manager configuration.\n      <p />\n      This contains default prefetch options and clearComplexPropertyBeforeSet options. For example:\n      <code>\n        <configuration>\n          <prefetch>common, dublincore</prefetch>\n          <clearComplexPropertyBeforeSet>true</clearComplexPropertyBeforeSet>\n          <allowVersionWriteForDublinCore>false</allowVersionWriteForDublinCore>\n        </configuration>\n      </code>\n      Note that since 11.1, setting fields, such as dc:modified, as prefetch is DEPRECATED:\n      only schema names are supported.\n\n      Note that setting clearComplexPropertyBeforeSet to false is DEPRECATED since 9.3.\n      Note that setting allowVersionWriteForDublinCore to true is DEPRECATED since 10.3.\n    </documentation>\n\n    <object class=\"org.nuxeo.ecm.core.schema.TypeConfiguration\" />\n\n  </extension-point>\n\n  <extension-point name=\"doctype\">\n\n    <documentation>\n      Extension Point to register new document types and facets.\n      <p />\n      Document types may implement several schemas and extends other\n      document types. You can compare document types with java\n      classes and schemas with java interfaces. Document types may\n      also contains several facets that define a behavior.\n      <p />\n      The prefetch element defines what fields are synchronously\n      indexed, and are made available in search results listings.\n      <p />\n      A doctype XML extension may contain several 'doctype' elements.\n      A doctype element may look like this:\n\n      <code>\n        <doctype name=\"File\" extends=\"Document\">\n          <schema name=\"common\" />\n          <schema name=\"file\" />\n          <schema name=\"dublincore\" />\n          <schema name=\"uid\" />\n          <facet name=\"Downloadable\" />\n          <facet name=\"Versionable\" />\n          <prefetch>dc:title, dc:modified, uid.uid</prefetch>\n        </doctype>\n      </code>\n\n      Document types may also specify subtypes, which are sets of other\n      document types that can be created inside the this document type\n      being defined.\n      <p />\n      This configuration only applies in the UI and will not affect\n      documents created through APIs (e.g. REST, Java)\n      This can be achieved as follows:\n\n      <code>\n        <doctype name=\"SomeFolder\" extends=\"Document\">\n          <subtypes>\n            <type>File</type>\n          </subtypes>\n        </doctype>\n      </code>\n\n      When extending a doctype, forbidden subtypes can also be specified\n      to prevent a specific type from being created.\n      <p />\n      This configuration only applies in the UI and will not affect\n      documents created through APIs (e.g. REST, Java)\n\n      <code>\n        <doctype name=\"SomeFolder\" append=\"true\">\n          <subtypes>\n            <type>SomeOtherFile</type>\n          </subtypes>\n          <subtypes-forbidden>\n            <type>File</type>\n          </subtypes-forbidden>\n        </doctype>\n      </code>\n\n      Facets are also defined by this extension point.\n      They can have zero or more schemas:\n\n      <code>\n        <facet name=\"MyFacet\" perDocumentQuery=\"false\" />\n        <facet name=\"MyFacetWithData\">\n          <schema name=\"myschema\" />\n          <schema name=\"otherschema\" />\n        </facet>\n        <facet name=\"MyOldFacet\" enabled=\"false\" />\n      </code>\n\n      Queries using ecm:mixinType on facets marked with\n      perDocumentQuery=\"false\" will not match any document where\n      this facet has been added using DocumentModel.addFacet() and does\n      not belong to the document type (this is done for performance reasons).\n\n      Facets with enabled=false will be ignored in all document types\n      still referencing them, and will not be returned when listing available facets.\n\n      It's also possible to associate one or more schemas to all proxies:\n      <code>\n        <proxies>\n          <schema name=\"myschema\" />\n        </proxies>\n      </code>\n    </documentation>\n\n    <object class=\"org.nuxeo.ecm.core.schema.DocumentTypeDescriptor\" />\n    <object class=\"org.nuxeo.ecm.core.schema.FacetDescriptor\" />\n    <object class=\"org.nuxeo.ecm.core.schema.ProxiesDescriptor\" />\n\n  </extension-point>\n\n  <extension-point name=\"schema\">\n\n    <documentation>\n      Extension Point to register new schemas.\n      <p />\n      Schemas are defined using XSD files.\n      The schema extension XML may containg several 'schema' objects as\n      the following ones:\n      <code>\n        <schema name=\"common\" src=\"schema/common.xsd\" />\n        <schema name=\"dublincore\" prefix=\"dc\" src=\"schema/dublincore.xsd\" />\n      </code>\n      The <i>name</i> attribute uniquely identify the schema, the <i>src</i> attribute specify\n      the path to that schema (relative to the bundle root) and the <i>prefix</i> is used as\n      a prefix (short name) of the schema namespace.\n      The schema namespace is the targetNamespace defined inside the XSD file\n      <p />\n      Note that multiple schemas can share the same target namespace and prefix\n      <p />\n      You can also create a Nuxeo Schema from a sub part of the XSD schema.\n      For that you can use the xsdRootElement attribute to indicate the complex type to use.\n      <code>\n        <schema name=\"employeeSchema\" src=\"schema/testExtension.xsd\" xsdRootElement=\"employee\" />\n      </code>\n      A schema can be completely disabled with:\n      <code>\n        <schema name=\"myOldSchema\" enabled=\"false\" />\n      </code>\n      Schemas with enabled=false will be ignored in all document types and facets\n      still referencing them, and will not be returned when listing available schemas.\n\n      Extension Point is also used to register additional property information, called property characteristic, such as:\n      <ul>\n        <li>secured: only administrators can edit it</li>\n        <li>deprecation: flag property as deprecated or removed</li>\n      </ul>\n      XML extensions may contain any number of 'property' elements of the form:\n      <code>\n        <property schema=\"dublincore\" name=\"creator\" secured=\"true\" />\n        <property schema=\"common\" name=\"size\" deprecation=\"deprecated\" />\n        <property schema=\"file\" name=\"filename\" deprecation=\"removed\" fallback=\"content/name\" />\n      </code>\n\n      Properties declared with secured attribute can only be edited by administrators.\n      <p />\n      Properties declared with deprecation attribute enable deprecation mechanism inside Nuxeo Platform.\n      This generates WARN message of usage to help to remove deprecated usage.\n      <p />\n      A contribution is one of these types:\n      <ul>\n        <li>deprecated: property still exists in schema definition, but it'll be removed in next version</li>\n        <li>removed: property has been removed from schema definition, relax platform behavior. This will avoid Nuxeo\n          property not found exceptions for remaining use of the property\n        </li>\n      </ul>\n      The fallback attribute is optional, its value has to be a xpath referencing an existing property in the same\n      schema than deprecated/removed property.\n      When presents, it is used:\n      <ul>\n        <li>to set the value to the fallback property</li>\n        <li>to get the value from the fallback property if it exists</li>\n      </ul>\n      Note: for a deprecated property, setValue also set value to property and getValue get value from property if\n      fallback value is null.\n      <p />\n      For example, the contribution below enables WARN message of usage of property <i>file:filename</i>. This will also\n      get/set the value from/to <i>file:content/name</i> for deprecated usage of <i>file:filename</i> property.\n      <code>\n        <property schema=\"file\" name=\"filename\" deprecation=\"deprecated\" fallback=\"content/name\" />\n      </code>\n      As it, each usage of this property will automatically fallback on the fallback and avoid exception from platform.\n      This will also allows to import document declaring the removed property.\n    </documentation>\n\n    <object class=\"org.nuxeo.ecm.core.schema.SchemaBindingDescriptor\" />\n    <object class=\"org.nuxeo.ecm.core.schema.PropertyDescriptor\" />\n\n  </extension-point>\n\n  <extension-point name=\"deprecation\">\n\n    <documentation>\n      Extension Point to register deprecated/removed properties.\n      XML extensions may contain any number of 'property' elements of the form:\n      <code>\n        <property schema=\"common\" name=\"size\" deprecated=\"true\" />\n        <property schema=\"file\" name=\"filename\" fallback=\"content/name\" />\n      </code>\n      A property contributed to this extension point enables deprecation mechanisms inside Nuxeo Platform.\n      This generates WARN message of usage to help to remove deprecated usage.\n      <p />\n      A contribution is one of these types:\n      <ul>\n        <li>deprecated: property still exists in schema definition, but it'll be removed in next version</li>\n        <li>removed: property has been removed from schema definition, relax platform behavior. This will avoid Nuxeo\n          property not found exceptions for remaining use of the property\n        </li>\n      </ul>\n      The fallback attribute is optional, its value has to be a xpath referencing an existing property in the same\n      schema than removed/deprecated property.\n      When presents, it is used:\n      <ul>\n        <li>to set the value to the fallback property</li>\n        <li>to get the value from the fallback property if it exists</li>\n      </ul>\n      Note: for a deprecated property, setValue also set value to property and getValue get value from property if\n      fallback value is null.\n      <p />\n      For example, the contribution below enables WARN message of usage of property <i>file:filename</i>. This will also\n      get/set the value from/to <i>file:content/name</i> for deprecated usage of <i>file:filename</i> property.\n      <code>\n        <property schema=\"file\" name=\"filename\" fallback=\"content/name\" />\n      </code>\n      As it, each usage of this property will automatically fallback on the fallback and avoid exception from platform.\n      This will also allows to import document declaring the removed property.\n      <p />\n      @since 9.2\n      @deprecated since 11.1, use schema extension point with PropertyDescriptor object\n    </documentation>\n\n    <object class=\"org.nuxeo.ecm.core.schema.PropertyDeprecationDescriptor\" />\n\n  </extension-point>\n\n</component>\n",
          "xmlFileName": "mockTestXmlFileName",
          "xmlPureComponent": false
        }
      ],
      "fileName": "mockTestFileName",
      "groupId": "org.nuxeo.ecm.core",
      "hierarchyPath": "/grp:org.nuxeo.ecm.core/org.nuxeo.ecm.core.schema",
      "id": "org.nuxeo.ecm.core.schema",
      "location": "mockTestLocation",
      "manifest": "mockTestManifest",
      "maxRegistrationOrder": 189,
      "minRegistrationOrder": 17,
      "packages": [],
      "requirements": [],
      "version": "mockTestVersion"
    },
    {
      "@type": "NXBundle",
      "artifactId": "nuxeo-runtime",
      "artifactVersion": "mockTestArtifactVersion",
      "bundleGroup": {
        "@type": "NXBundleGroup",
        "bundleIds": [
          "org.nuxeo.runtime",
          "org.nuxeo.runtime.cluster",
          "org.nuxeo.runtime.datasource",
          "org.nuxeo.runtime.jtajca",
          "org.nuxeo.runtime.kv",
          "org.nuxeo.runtime.management",
          "org.nuxeo.runtime.metrics",
          "org.nuxeo.runtime.migration",
          "org.nuxeo.runtime.mongodb",
          "org.nuxeo.runtime.pubsub",
          "org.nuxeo.runtime.reload",
          "org.nuxeo.runtime.stream",
          "org.nuxeo.runtime.stream.test"
        ],
        "hierarchyPath": "/grp:org.nuxeo.runtime",
        "id": "grp:org.nuxeo.runtime",
        "name": "org.nuxeo.runtime",
        "parentIds": [],
        "readmes": [],
        "version": "mockTestVersion"
      },
      "bundleId": "org.nuxeo.runtime",
      "components": [
        {
          "@type": "NXComponent",
          "componentClass": "org.nuxeo.runtime.services.config.ConfigurationServiceImpl",
          "documentation": "\n    The ConfigurationService service holds application configuration properties that are used at runtime. This\n    service should not include properties that are needed at startup.\n\n    @since 7.4\n  \n",
          "documentationHtml": "<p/>\nThe ConfigurationService service holds application configuration properties that are used at runtime. This\nservice should not include properties that are needed at startup.\n<p/>\n@since 7.4\n<p/>",
          "extensionPoints": [
            {
              "@type": "NXExtensionPoint",
              "componentId": "org.nuxeo.runtime.ConfigurationService",
              "descriptors": [
                "org.nuxeo.runtime.services.config.ConfigurationPropertyDescriptor"
              ],
              "documentation": "\n      The configuration extension point allows to define named properties.\n\n      Properties can be marked as list and if defined many times, values will be appended as comma separated values.\n\n      You can override existing list property with the override attribute.\n\n      Example:\n\n      <code>\n    <property name=\"nuxeo.jsf.enableDoubleClickShield\">true</property>\n    <property name=\"nuxeo.jsf.useAjaxTabs\">false</property>\n    <property list=\"true\" name=\"nuxeo.list.value\">foo</property>\n    <property name=\"nuxeo.list.value\">bar</property>\n    <property name=\"nuxeo.list.value\" override=\"true\">I'd like to make sure value is not foo,bar anymore</property>\n</code>\n",
              "documentationHtml": "<p/>\nThe configuration extension point allows to define named properties.\n<p/>\nProperties can be marked as list and if defined many times, values will be appended as comma separated values.\n<p/>\nYou can override existing list property with the override attribute.\n<p/>\nExample:\n<p/>\n<pre><code>    &lt;property name=\"nuxeo.jsf.enableDoubleClickShield\">true&lt;/property>\n    &lt;property name=\"nuxeo.jsf.useAjaxTabs\">false&lt;/property>\n    &lt;property list=\"true\" name=\"nuxeo.list.value\">foo&lt;/property>\n    &lt;property name=\"nuxeo.list.value\">bar&lt;/property>\n    &lt;property name=\"nuxeo.list.value\" override=\"true\">I'd like to make sure value is not foo,bar anymore&lt;/property>\n</code></pre><p/>",
              "hierarchyPath": "/grp:org.nuxeo.runtime/org.nuxeo.runtime/org.nuxeo.runtime.ConfigurationService/ExtensionPoints/org.nuxeo.runtime.ConfigurationService--configuration",
              "id": "org.nuxeo.runtime.ConfigurationService--configuration",
              "label": "configuration (org.nuxeo.runtime.ConfigurationService)",
              "name": "configuration",
              "version": "mockTestVersion"
            }
          ],
          "extensions": [],
          "hierarchyPath": "/grp:org.nuxeo.runtime/org.nuxeo.runtime/org.nuxeo.runtime.ConfigurationService",
          "name": "org.nuxeo.runtime.ConfigurationService",
          "registrationOrder": 160,
          "requirements": [],
          "services": [],
          "version": "mockTestVersion",
          "xmlFileContent": "<?xml version=\"1.0\"?>\n<component name=\"org.nuxeo.runtime.ConfigurationService\">\n\n  <documentation>\n    The ConfigurationService service holds application configuration properties that are used at runtime. This\n    service should not include properties that are needed at startup.\n\n    @since 7.4\n  </documentation>\n\n  <implementation\n    class=\"org.nuxeo.runtime.services.config.ConfigurationServiceImpl\" />\n\n  <service>\n    <provide interface=\"org.nuxeo.runtime.services.config.ConfigurationService\" />\n  </service>\n\n  <extension-point name=\"configuration\">\n    <documentation>\n      The configuration extension point allows to define named properties.\n\n      Properties can be marked as list and if defined many times, values will be appended as comma separated values.\n\n      You can override existing list property with the override attribute.\n\n      Example:\n\n      <code>\n        <property name=\"nuxeo.jsf.enableDoubleClickShield\">true</property>\n        <property name=\"nuxeo.jsf.useAjaxTabs\">false</property>\n\n        <property name=\"nuxeo.list.value\" list=\"true\">foo</property>\n        <property name=\"nuxeo.list.value\">bar</property>\n        <property name=\"nuxeo.list.value\" override=\"true\">I'd like to make sure value is not foo,bar anymore</property>\n      </code>\n    </documentation>\n    <object class=\"org.nuxeo.runtime.services.config.ConfigurationPropertyDescriptor\" />\n  </extension-point>\n\n</component>",
          "xmlFileName": "mockTestXmlFileName",
          "xmlPureComponent": false
        }
      ],
      "fileName": "mockTestFileName",
      "groupId": "org.nuxeo.runtime",
      "hierarchyPath": "/grp:org.nuxeo.runtime/org.nuxeo.runtime",
      "id": "org.nuxeo.runtime",
      "location": "mockTestLocation",
      "manifest": "mockTestManifest",
      "packages": [],
      "requirements": [],
      "version": "mockTestVersion"
    }
  ],
  "creationDate": null,
  "key": "Nuxeo-unknown",
  "name": "Nuxeo",
  "operations": [
    {
      "@type": "NXOperation",
      "aliases": [],
      "category": "Services",
      "contributingComponent": "org.nuxeo.ecm.core.automation.features.operations",
      "description": "Retrieve list of available actions for a given category. Action context is built based on the Operation context (currentDocument will be fetched from Context if not provided as input). If this operation is executed in a chain that initialized the Seam context, it will be used for Action context",
      "hierarchyPath": "/op:Actions.GET",
      "label": "List available actions",
      "name": "Actions.GET",
      "operationClass": "org.nuxeo.ecm.automation.core.operations.services.GetActions",
      "params": [
        {
          "description": "",
          "isRequired": true,
          "name": "category",
          "order": 0,
          "type": "string",
          "values": [],
          "widget": null
        },
        {
          "description": "",
          "isRequired": false,
          "name": "lang",
          "order": 0,
          "type": "string",
          "values": [],
          "widget": null
        }
      ],
      "signature": [
        "void",
        "blob",
        "document",
        "blob"
      ],
      "since": "",
      "url": "Actions.GET",
      "version": "mockTestVersion"
    },
    {
      "@type": "NXOperation",
      "aliases": [],
      "category": "Chain",
      "contributingComponent": "org.nuxeo.ecm.core.automation.features.operations",
      "hierarchyPath": "/op:AttachFiles",
      "label": "AttachFiles",
      "name": "AttachFiles",
      "operationClass": "org.nuxeo.ecm.automation.core.impl.OperationChainCompiler.CompiledChainImpl",
      "params": [],
      "signature": [
        "bloblist",
        "document",
        "blob",
        "document"
      ],
      "since": "",
      "url": "AttachFiles",
      "version": "mockTestVersion"
    }
  ],
  "packages": [
    {
      "@type": "NXPackage",
      "bundles": [
        "org.nuxeo.apidoc.core",
        "org.nuxeo.apidoc.repo"
      ],
      "conflicts": [],
      "dependencies": [
        "platform-explorer-base"
      ],
      "hierarchyPath": "/platform-explorer-mock-1.0.1",
      "id": "platform-explorer-mock-1.0.1",
      "name": "platform-explorer-mock",
      "optionalDependencies": [],
      "packageType": "addon",
      "title": "Platform Explorer Mock",
      "version": "mockTestVersion"
    }
  ],
  "pluginSnapshots": {},
  "releaseDate": null,
  "version": "mockTestVersion"
}
